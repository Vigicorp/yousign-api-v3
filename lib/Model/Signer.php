<?php
/**
 * Signer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yousign\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Public Api v3
 *
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@yousign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yousign\Client\Model;

use \ArrayAccess;
use \Yousign\Client\ObjectSerializer;

/**
 * Signer Class Doc Comment
 *
 * @category Class
 * @description Signer
 * @package  Yousign\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Signer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Signer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'info' => '\Yousign\Client\Model\SignerInfo',
        'status' => 'string',
        'fields' => '\Yousign\Client\Model\SignerFieldsInner[]',
        'signature_level' => 'string',
        'signature_authentication_mode' => 'string',
        'signature_link' => 'string',
        'signature_link_expiration_date' => '\DateTime',
        'signature_image_preview' => 'string',
        'redirect_urls' => '\Yousign\Client\Model\SignerRedirectUrls',
        'custom_text' => '\Yousign\Client\Model\SignerCustomText',
        'delivery_mode' => 'string',
        'identification_attestation_id' => 'string',
        'sms_notification' => '\Yousign\Client\Model\SmsNotification'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'info' => null,
        'status' => null,
        'fields' => null,
        'signature_level' => null,
        'signature_authentication_mode' => null,
        'signature_link' => 'uri',
        'signature_link_expiration_date' => 'date-time',
        'signature_image_preview' => null,
        'redirect_urls' => null,
        'custom_text' => null,
        'delivery_mode' => null,
        'identification_attestation_id' => null,
        'sms_notification' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'info' => 'info',
        'status' => 'status',
        'fields' => 'fields',
        'signature_level' => 'signature_level',
        'signature_authentication_mode' => 'signature_authentication_mode',
        'signature_link' => 'signature_link',
        'signature_link_expiration_date' => 'signature_link_expiration_date',
        'signature_image_preview' => 'signature_image_preview',
        'redirect_urls' => 'redirect_urls',
        'custom_text' => 'custom_text',
        'delivery_mode' => 'delivery_mode',
        'identification_attestation_id' => 'identification_attestation_id',
        'sms_notification' => 'sms_notification'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'info' => 'setInfo',
        'status' => 'setStatus',
        'fields' => 'setFields',
        'signature_level' => 'setSignatureLevel',
        'signature_authentication_mode' => 'setSignatureAuthenticationMode',
        'signature_link' => 'setSignatureLink',
        'signature_link_expiration_date' => 'setSignatureLinkExpirationDate',
        'signature_image_preview' => 'setSignatureImagePreview',
        'redirect_urls' => 'setRedirectUrls',
        'custom_text' => 'setCustomText',
        'delivery_mode' => 'setDeliveryMode',
        'identification_attestation_id' => 'setIdentificationAttestationId',
        'sms_notification' => 'setSmsNotification'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'info' => 'getInfo',
        'status' => 'getStatus',
        'fields' => 'getFields',
        'signature_level' => 'getSignatureLevel',
        'signature_authentication_mode' => 'getSignatureAuthenticationMode',
        'signature_link' => 'getSignatureLink',
        'signature_link_expiration_date' => 'getSignatureLinkExpirationDate',
        'signature_image_preview' => 'getSignatureImagePreview',
        'redirect_urls' => 'getRedirectUrls',
        'custom_text' => 'getCustomText',
        'delivery_mode' => 'getDeliveryMode',
        'identification_attestation_id' => 'getIdentificationAttestationId',
        'sms_notification' => 'getSmsNotification'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_INITIATED = 'initiated';
    const STATUS_DECLINED = 'declined';
    const STATUS_NOTIFIED = 'notified';
    const STATUS_VERIFIED = 'verified';
    const STATUS_PROCESSING = 'processing';
    const STATUS_CONSENT_GIVEN = 'consent_given';
    const STATUS_SIGNED = 'signed';
    const STATUS_ABORTED = 'aborted';
    const STATUS_ERROR = 'error';
    const SIGNATURE_LEVEL_ELECTRONIC_SIGNATURE = 'electronic_signature';
    const SIGNATURE_LEVEL_ADVANCED_ELECTRONIC_SIGNATURE = 'advanced_electronic_signature';
    const SIGNATURE_LEVEL_ELECTRONIC_SIGNATURE_WITH_QUALIFIED_CERTIFICATE = 'electronic_signature_with_qualified_certificate';
    const SIGNATURE_LEVEL_QUALIFIED_ELECTRONIC_SIGNATURE = 'qualified_electronic_signature';
    const SIGNATURE_LEVEL_QUALIFIED_ELECTRONIC_SIGNATURE_MODE_1 = 'qualified_electronic_signature_mode_1';
    const SIGNATURE_AUTHENTICATION_MODE_NULL = 'null';
    const SIGNATURE_AUTHENTICATION_MODE_OTP_EMAIL = 'otp_email';
    const SIGNATURE_AUTHENTICATION_MODE_OTP_SMS = 'otp_sms';
    const SIGNATURE_AUTHENTICATION_MODE_NO_OTP = 'no_otp';
    const DELIVERY_MODE_EMAIL = 'email';
    const DELIVERY_MODE_NONE = 'none';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_INITIATED,
            self::STATUS_DECLINED,
            self::STATUS_NOTIFIED,
            self::STATUS_VERIFIED,
            self::STATUS_PROCESSING,
            self::STATUS_CONSENT_GIVEN,
            self::STATUS_SIGNED,
            self::STATUS_ABORTED,
            self::STATUS_ERROR,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSignatureLevelAllowableValues()
    {
        return [
            self::SIGNATURE_LEVEL_ELECTRONIC_SIGNATURE,
            self::SIGNATURE_LEVEL_ADVANCED_ELECTRONIC_SIGNATURE,
            self::SIGNATURE_LEVEL_ELECTRONIC_SIGNATURE_WITH_QUALIFIED_CERTIFICATE,
            self::SIGNATURE_LEVEL_QUALIFIED_ELECTRONIC_SIGNATURE,
            self::SIGNATURE_LEVEL_QUALIFIED_ELECTRONIC_SIGNATURE_MODE_1,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSignatureAuthenticationModeAllowableValues()
    {
        return [
            self::SIGNATURE_AUTHENTICATION_MODE_NULL,
            self::SIGNATURE_AUTHENTICATION_MODE_OTP_EMAIL,
            self::SIGNATURE_AUTHENTICATION_MODE_OTP_SMS,
            self::SIGNATURE_AUTHENTICATION_MODE_NO_OTP,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryModeAllowableValues()
    {
        return [
            self::DELIVERY_MODE_EMAIL,
            self::DELIVERY_MODE_NONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['info'] = isset($data['info']) ? $data['info'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['fields'] = isset($data['fields']) ? $data['fields'] : null;
        $this->container['signature_level'] = isset($data['signature_level']) ? $data['signature_level'] : 'electronic_signature';
        $this->container['signature_authentication_mode'] = isset($data['signature_authentication_mode']) ? $data['signature_authentication_mode'] : null;
        $this->container['signature_link'] = isset($data['signature_link']) ? $data['signature_link'] : null;
        $this->container['signature_link_expiration_date'] = isset($data['signature_link_expiration_date']) ? $data['signature_link_expiration_date'] : null;
        $this->container['signature_image_preview'] = isset($data['signature_image_preview']) ? $data['signature_image_preview'] : null;
        $this->container['redirect_urls'] = isset($data['redirect_urls']) ? $data['redirect_urls'] : null;
        $this->container['custom_text'] = isset($data['custom_text']) ? $data['custom_text'] : null;
        $this->container['delivery_mode'] = isset($data['delivery_mode']) ? $data['delivery_mode'] : null;
        $this->container['identification_attestation_id'] = isset($data['identification_attestation_id']) ? $data['identification_attestation_id'] : null;
        $this->container['sms_notification'] = isset($data['sms_notification']) ? $data['sms_notification'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['info'] === null) {
            $invalidProperties[] = "'info' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['fields'] === null) {
            $invalidProperties[] = "'fields' can't be null";
        }
        if ($this->container['signature_level'] === null) {
            $invalidProperties[] = "'signature_level' can't be null";
        }
        $allowedValues = $this->getSignatureLevelAllowableValues();
        if (!is_null($this->container['signature_level']) && !in_array($this->container['signature_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'signature_level', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['signature_authentication_mode'] === null) {
            $invalidProperties[] = "'signature_authentication_mode' can't be null";
        }
        $allowedValues = $this->getSignatureAuthenticationModeAllowableValues();
        if (!is_null($this->container['signature_authentication_mode']) && !in_array($this->container['signature_authentication_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'signature_authentication_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['signature_link'] === null) {
            $invalidProperties[] = "'signature_link' can't be null";
        }
        if ($this->container['signature_link_expiration_date'] === null) {
            $invalidProperties[] = "'signature_link_expiration_date' can't be null";
        }
        if ($this->container['signature_image_preview'] === null) {
            $invalidProperties[] = "'signature_image_preview' can't be null";
        }
        if ($this->container['redirect_urls'] === null) {
            $invalidProperties[] = "'redirect_urls' can't be null";
        }
        if ($this->container['custom_text'] === null) {
            $invalidProperties[] = "'custom_text' can't be null";
        }
        if ($this->container['delivery_mode'] === null) {
            $invalidProperties[] = "'delivery_mode' can't be null";
        }
        $allowedValues = $this->getDeliveryModeAllowableValues();
        if (!is_null($this->container['delivery_mode']) && !in_array($this->container['delivery_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'delivery_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['identification_attestation_id'] === null) {
            $invalidProperties[] = "'identification_attestation_id' can't be null";
        }
        if ($this->container['sms_notification'] === null) {
            $invalidProperties[] = "'sms_notification' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets info
     *
     * @return \Yousign\Client\Model\SignerInfo
     */
    public function getInfo()
    {
        return $this->container['info'];
    }

    /**
     * Sets info
     *
     * @param \Yousign\Client\Model\SignerInfo $info info
     *
     * @return $this
     */
    public function setInfo($info)
    {
        $this->container['info'] = $info;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \Yousign\Client\Model\SignerFieldsInner[]
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \Yousign\Client\Model\SignerFieldsInner[] $fields fields
     *
     * @return $this
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets signature_level
     *
     * @return string
     */
    public function getSignatureLevel()
    {
        return $this->container['signature_level'];
    }

    /**
     * Sets signature_level
     *
     * @param string $signature_level signature_level
     *
     * @return $this
     */
    public function setSignatureLevel($signature_level)
    {
        $allowedValues = $this->getSignatureLevelAllowableValues();
        if (!in_array($signature_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'signature_level', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['signature_level'] = $signature_level;

        return $this;
    }

    /**
     * Gets signature_authentication_mode
     *
     * @return string
     */
    public function getSignatureAuthenticationMode()
    {
        return $this->container['signature_authentication_mode'];
    }

    /**
     * Sets signature_authentication_mode
     *
     * @param string $signature_authentication_mode signature_authentication_mode
     *
     * @return $this
     */
    public function setSignatureAuthenticationMode($signature_authentication_mode)
    {
        $allowedValues = $this->getSignatureAuthenticationModeAllowableValues();
        if (!in_array($signature_authentication_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'signature_authentication_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['signature_authentication_mode'] = $signature_authentication_mode;

        return $this;
    }

    /**
     * Gets signature_link
     *
     * @return string
     */
    public function getSignatureLink()
    {
        return $this->container['signature_link'];
    }

    /**
     * Sets signature_link
     *
     * @param string $signature_link signature_link
     *
     * @return $this
     */
    public function setSignatureLink($signature_link)
    {
        $this->container['signature_link'] = $signature_link;

        return $this;
    }

    /**
     * Gets signature_link_expiration_date
     *
     * @return \DateTime
     */
    public function getSignatureLinkExpirationDate()
    {
        return $this->container['signature_link_expiration_date'];
    }

    /**
     * Sets signature_link_expiration_date
     *
     * @param \DateTime $signature_link_expiration_date signature_link_expiration_date
     *
     * @return $this
     */
    public function setSignatureLinkExpirationDate($signature_link_expiration_date)
    {
        $this->container['signature_link_expiration_date'] = $signature_link_expiration_date;

        return $this;
    }

    /**
     * Gets signature_image_preview
     *
     * @return string
     */
    public function getSignatureImagePreview()
    {
        return $this->container['signature_image_preview'];
    }

    /**
     * Sets signature_image_preview
     *
     * @param string $signature_image_preview signature_image_preview
     *
     * @return $this
     */
    public function setSignatureImagePreview($signature_image_preview)
    {
        $this->container['signature_image_preview'] = $signature_image_preview;

        return $this;
    }

    /**
     * Gets redirect_urls
     *
     * @return \Yousign\Client\Model\SignerRedirectUrls
     */
    public function getRedirectUrls()
    {
        return $this->container['redirect_urls'];
    }

    /**
     * Sets redirect_urls
     *
     * @param \Yousign\Client\Model\SignerRedirectUrls $redirect_urls redirect_urls
     *
     * @return $this
     */
    public function setRedirectUrls($redirect_urls)
    {
        $this->container['redirect_urls'] = $redirect_urls;

        return $this;
    }

    /**
     * Gets custom_text
     *
     * @return \Yousign\Client\Model\SignerCustomText
     */
    public function getCustomText()
    {
        return $this->container['custom_text'];
    }

    /**
     * Sets custom_text
     *
     * @param \Yousign\Client\Model\SignerCustomText $custom_text custom_text
     *
     * @return $this
     */
    public function setCustomText($custom_text)
    {
        $this->container['custom_text'] = $custom_text;

        return $this;
    }

    /**
     * Gets delivery_mode
     *
     * @return string
     */
    public function getDeliveryMode()
    {
        return $this->container['delivery_mode'];
    }

    /**
     * Sets delivery_mode
     *
     * @param string $delivery_mode delivery_mode
     *
     * @return $this
     */
    public function setDeliveryMode($delivery_mode)
    {
        $allowedValues = $this->getDeliveryModeAllowableValues();
        if (!in_array($delivery_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'delivery_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_mode'] = $delivery_mode;

        return $this;
    }

    /**
     * Gets identification_attestation_id
     *
     * @return string
     */
    public function getIdentificationAttestationId()
    {
        return $this->container['identification_attestation_id'];
    }

    /**
     * Sets identification_attestation_id
     *
     * @param string $identification_attestation_id identification_attestation_id
     *
     * @return $this
     */
    public function setIdentificationAttestationId($identification_attestation_id)
    {
        $this->container['identification_attestation_id'] = $identification_attestation_id;

        return $this;
    }

    /**
     * Gets sms_notification
     *
     * @return \Yousign\Client\Model\SmsNotification
     */
    public function getSmsNotification()
    {
        return $this->container['sms_notification'];
    }

    /**
     * Sets sms_notification
     *
     * @param \Yousign\Client\Model\SmsNotification $sms_notification sms_notification
     *
     * @return $this
     */
    public function setSmsNotification($sms_notification)
    {
        $this->container['sms_notification'] = $sms_notification;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
