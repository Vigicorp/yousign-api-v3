<?php
/**
 * CreateField
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Yousign\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Public Api v3
 *
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: contact@yousign.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Yousign\Client\Model;

use \ArrayAccess;
use \Yousign\Client\ObjectSerializer;

/**
 * CreateField Class Doc Comment
 *
 * @category Class
 * @package  Yousign\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateField implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'signer_id' => 'string',
        'type' => 'string',
        'page' => 'int',
        'x' => 'int',
        'y' => 'int',
        'height' => 'int',
        'width' => 'int',
        'mention' => 'string',
        'font' => '\Yousign\Client\Model\CreateFieldFont',
        'max_length' => 'int',
        'question' => 'string',
        'instruction' => 'string',
        'optional' => 'bool',
        'size' => 'int',
        'name' => 'string',
        'checked' => 'bool',
        'radios' => '\Yousign\Client\Model\RadioGroupRadiosInner[]',
        'text' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'signer_id' => 'uuid',
        'type' => null,
        'page' => null,
        'x' => null,
        'y' => null,
        'height' => null,
        'width' => null,
        'mention' => null,
        'font' => null,
        'max_length' => null,
        'question' => null,
        'instruction' => null,
        'optional' => null,
        'size' => null,
        'name' => null,
        'checked' => null,
        'radios' => null,
        'text' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'signer_id' => false,
        'type' => false,
        'page' => false,
        'x' => false,
        'y' => false,
        'height' => true,
        'width' => true,
        'mention' => false,
        'font' => true,
        'max_length' => false,
        'question' => false,
        'instruction' => true,
        'optional' => false,
        'size' => false,
        'name' => true,
        'checked' => false,
        'radios' => false,
        'text' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'signer_id' => 'signer_id',
        'type' => 'type',
        'page' => 'page',
        'x' => 'x',
        'y' => 'y',
        'height' => 'height',
        'width' => 'width',
        'mention' => 'mention',
        'font' => 'font',
        'max_length' => 'max_length',
        'question' => 'question',
        'instruction' => 'instruction',
        'optional' => 'optional',
        'size' => 'size',
        'name' => 'name',
        'checked' => 'checked',
        'radios' => 'radios',
        'text' => 'text'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'signer_id' => 'setSignerId',
        'type' => 'setType',
        'page' => 'setPage',
        'x' => 'setX',
        'y' => 'setY',
        'height' => 'setHeight',
        'width' => 'setWidth',
        'mention' => 'setMention',
        'font' => 'setFont',
        'max_length' => 'setMaxLength',
        'question' => 'setQuestion',
        'instruction' => 'setInstruction',
        'optional' => 'setOptional',
        'size' => 'setSize',
        'name' => 'setName',
        'checked' => 'setChecked',
        'radios' => 'setRadios',
        'text' => 'setText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'signer_id' => 'getSignerId',
        'type' => 'getType',
        'page' => 'getPage',
        'x' => 'getX',
        'y' => 'getY',
        'height' => 'getHeight',
        'width' => 'getWidth',
        'mention' => 'getMention',
        'font' => 'getFont',
        'max_length' => 'getMaxLength',
        'question' => 'getQuestion',
        'instruction' => 'getInstruction',
        'optional' => 'getOptional',
        'size' => 'getSize',
        'name' => 'getName',
        'checked' => 'getChecked',
        'radios' => 'getRadios',
        'text' => 'getText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_SIGNATURE = 'signature';
    public const TYPE_MENTION = 'mention';
    public const TYPE_TEXT = 'text';
    public const TYPE_CHECKBOX = 'checkbox';
    public const TYPE_RADIO_GROUP = 'radio_group';
    public const TYPE_READ_ONLY_TEXT = 'read_only_text';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SIGNATURE,
            self::TYPE_MENTION,
            self::TYPE_TEXT,
            self::TYPE_CHECKBOX,
            self::TYPE_RADIO_GROUP,
            self::TYPE_READ_ONLY_TEXT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('signer_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('page', $data ?? [], null);
        $this->setIfExists('x', $data ?? [], null);
        $this->setIfExists('y', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('mention', $data ?? [], null);
        $this->setIfExists('font', $data ?? [], null);
        $this->setIfExists('max_length', $data ?? [], null);
        $this->setIfExists('question', $data ?? [], null);
        $this->setIfExists('instruction', $data ?? [], null);
        $this->setIfExists('optional', $data ?? [], false);
        $this->setIfExists('size', $data ?? [], 24);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('checked', $data ?? [], false);
        $this->setIfExists('radios', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['signer_id'] === null) {
            $invalidProperties[] = "'signer_id' can't be null";
        }
        if (!preg_match("/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/", $this->container['signer_id'])) {
            $invalidProperties[] = "invalid value for 'signer_id', must be conform to the pattern /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['page'] === null) {
            $invalidProperties[] = "'page' can't be null";
        }
        if (($this->container['page'] < 1)) {
            $invalidProperties[] = "invalid value for 'page', must be bigger than or equal to 1.";
        }

        if ($this->container['x'] === null) {
            $invalidProperties[] = "'x' can't be null";
        }
        if (($this->container['x'] > 32767)) {
            $invalidProperties[] = "invalid value for 'x', must be smaller than or equal to 32767.";
        }

        if (($this->container['x'] < 0)) {
            $invalidProperties[] = "invalid value for 'x', must be bigger than or equal to 0.";
        }

        if ($this->container['y'] === null) {
            $invalidProperties[] = "'y' can't be null";
        }
        if (($this->container['y'] > 32767)) {
            $invalidProperties[] = "invalid value for 'y', must be smaller than or equal to 32767.";
        }

        if (($this->container['y'] < 0)) {
            $invalidProperties[] = "invalid value for 'y', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['height']) && ($this->container['height'] < 24)) {
            $invalidProperties[] = "invalid value for 'height', must be bigger than or equal to 24.";
        }

        if (!is_null($this->container['width']) && ($this->container['width'] < 24)) {
            $invalidProperties[] = "invalid value for 'width', must be bigger than or equal to 24.";
        }

        if ($this->container['mention'] === null) {
            $invalidProperties[] = "'mention' can't be null";
        }
        if ((mb_strlen($this->container['mention']) > 255)) {
            $invalidProperties[] = "invalid value for 'mention', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['mention']) < 1)) {
            $invalidProperties[] = "invalid value for 'mention', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['max_length'] === null) {
            $invalidProperties[] = "'max_length' can't be null";
        }
        if (($this->container['max_length'] > 32767)) {
            $invalidProperties[] = "invalid value for 'max_length', must be smaller than or equal to 32767.";
        }

        if (($this->container['max_length'] < 1)) {
            $invalidProperties[] = "invalid value for 'max_length', must be bigger than or equal to 1.";
        }

        if ($this->container['question'] === null) {
            $invalidProperties[] = "'question' can't be null";
        }
        if ((mb_strlen($this->container['question']) > 255)) {
            $invalidProperties[] = "invalid value for 'question', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['size']) && ($this->container['size'] > 30)) {
            $invalidProperties[] = "invalid value for 'size', must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['size']) && ($this->container['size'] < 8)) {
            $invalidProperties[] = "invalid value for 'size', must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 128)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['radios'] === null) {
            $invalidProperties[] = "'radios' can't be null";
        }
        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        if ((mb_strlen($this->container['text']) > 5000)) {
            $invalidProperties[] = "invalid value for 'text', the character length must be smaller than or equal to 5000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets signer_id
     *
     * @return string
     */
    public function getSignerId()
    {
        return $this->container['signer_id'];
    }

    /**
     * Sets signer_id
     *
     * @param string $signer_id signer_id
     *
     * @return self
     */
    public function setSignerId($signer_id)
    {
        if (is_null($signer_id)) {
            throw new \InvalidArgumentException('non-nullable signer_id cannot be null');
        }

        if ((!preg_match("/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/", ObjectSerializer::toString($signer_id)))) {
            throw new \InvalidArgumentException("invalid value for \$signer_id when calling CreateField., must conform to the pattern /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/.");
        }

        $this->container['signer_id'] = $signer_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets page
     *
     * @return int
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param int $page page
     *
     * @return self
     */
    public function setPage($page)
    {
        if (is_null($page)) {
            throw new \InvalidArgumentException('non-nullable page cannot be null');
        }

        if (($page < 1)) {
            throw new \InvalidArgumentException('invalid value for $page when calling CreateField., must be bigger than or equal to 1.');
        }

        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets x
     *
     * @return int
     */
    public function getX()
    {
        return $this->container['x'];
    }

    /**
     * Sets x
     *
     * @param int $x x
     *
     * @return self
     */
    public function setX($x)
    {
        if (is_null($x)) {
            throw new \InvalidArgumentException('non-nullable x cannot be null');
        }

        if (($x > 32767)) {
            throw new \InvalidArgumentException('invalid value for $x when calling CreateField., must be smaller than or equal to 32767.');
        }
        if (($x < 0)) {
            throw new \InvalidArgumentException('invalid value for $x when calling CreateField., must be bigger than or equal to 0.');
        }

        $this->container['x'] = $x;

        return $this;
    }

    /**
     * Gets y
     *
     * @return int
     */
    public function getY()
    {
        return $this->container['y'];
    }

    /**
     * Sets y
     *
     * @param int $y y
     *
     * @return self
     */
    public function setY($y)
    {
        if (is_null($y)) {
            throw new \InvalidArgumentException('non-nullable y cannot be null');
        }

        if (($y > 32767)) {
            throw new \InvalidArgumentException('invalid value for $y when calling CreateField., must be smaller than or equal to 32767.');
        }
        if (($y < 0)) {
            throw new \InvalidArgumentException('invalid value for $y when calling CreateField., must be bigger than or equal to 0.');
        }

        $this->container['y'] = $y;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|null $height The height must be 24 or a multiple of 15 greater than 24. If height is not provided, it will be calculated depending on the number of newlines in the read only text.
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            array_push($this->openAPINullablesSetToNull, 'height');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('height', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($height) && ($height < 24)) {
            throw new \InvalidArgumentException('invalid value for $height when calling CreateField., must be bigger than or equal to 24.');
        }

        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width If not set, the width is automatically calculated with the read only text length.
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            array_push($this->openAPINullablesSetToNull, 'width');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('width', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($width) && ($width < 24)) {
            throw new \InvalidArgumentException('invalid value for $width when calling CreateField., must be bigger than or equal to 24.');
        }

        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets mention
     *
     * @return string
     */
    public function getMention()
    {
        return $this->container['mention'];
    }

    /**
     * Sets mention
     *
     * @param string $mention mention
     *
     * @return self
     */
    public function setMention($mention)
    {
        if (is_null($mention)) {
            throw new \InvalidArgumentException('non-nullable mention cannot be null');
        }
        if ((mb_strlen($mention) > 255)) {
            throw new \InvalidArgumentException('invalid length for $mention when calling CreateField., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($mention) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mention when calling CreateField., must be bigger than or equal to 1.');
        }

        $this->container['mention'] = $mention;

        return $this;
    }

    /**
     * Gets font
     *
     * @return \Yousign\Client\Model\CreateFieldFont|null
     */
    public function getFont()
    {
        return $this->container['font'];
    }

    /**
     * Sets font
     *
     * @param \Yousign\Client\Model\CreateFieldFont|null $font font
     *
     * @return self
     */
    public function setFont($font)
    {
        if (is_null($font)) {
            array_push($this->openAPINullablesSetToNull, 'font');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('font', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['font'] = $font;

        return $this;
    }

    /**
     * Gets max_length
     *
     * @return int
     */
    public function getMaxLength()
    {
        return $this->container['max_length'];
    }

    /**
     * Sets max_length
     *
     * @param int $max_length max_length
     *
     * @return self
     */
    public function setMaxLength($max_length)
    {
        if (is_null($max_length)) {
            throw new \InvalidArgumentException('non-nullable max_length cannot be null');
        }

        if (($max_length > 32767)) {
            throw new \InvalidArgumentException('invalid value for $max_length when calling CreateField., must be smaller than or equal to 32767.');
        }
        if (($max_length < 1)) {
            throw new \InvalidArgumentException('invalid value for $max_length when calling CreateField., must be bigger than or equal to 1.');
        }

        $this->container['max_length'] = $max_length;

        return $this;
    }

    /**
     * Gets question
     *
     * @return string
     */
    public function getQuestion()
    {
        return $this->container['question'];
    }

    /**
     * Sets question
     *
     * @param string $question question
     *
     * @return self
     */
    public function setQuestion($question)
    {
        if (is_null($question)) {
            throw new \InvalidArgumentException('non-nullable question cannot be null');
        }
        if ((mb_strlen($question) > 255)) {
            throw new \InvalidArgumentException('invalid length for $question when calling CreateField., must be smaller than or equal to 255.');
        }

        $this->container['question'] = $question;

        return $this;
    }

    /**
     * Gets instruction
     *
     * @return string|null
     */
    public function getInstruction()
    {
        return $this->container['instruction'];
    }

    /**
     * Sets instruction
     *
     * @param string|null $instruction instruction
     *
     * @return self
     */
    public function setInstruction($instruction)
    {
        if (is_null($instruction)) {
            array_push($this->openAPINullablesSetToNull, 'instruction');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('instruction', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['instruction'] = $instruction;

        return $this;
    }

    /**
     * Gets optional
     *
     * @return bool|null
     */
    public function getOptional()
    {
        return $this->container['optional'];
    }

    /**
     * Sets optional
     *
     * @param bool|null $optional optional
     *
     * @return self
     */
    public function setOptional($optional)
    {
        if (is_null($optional)) {
            throw new \InvalidArgumentException('non-nullable optional cannot be null');
        }
        $this->container['optional'] = $optional;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }

        if (($size > 30)) {
            throw new \InvalidArgumentException('invalid value for $size when calling CreateField., must be smaller than or equal to 30.');
        }
        if (($size < 8)) {
            throw new \InvalidArgumentException('invalid value for $size when calling CreateField., must be bigger than or equal to 8.');
        }

        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Radio group's name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($name) && (mb_strlen($name) > 128)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CreateField., must be smaller than or equal to 128.');
        }
        if (!is_null($name) && (mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CreateField., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets checked
     *
     * @return bool|null
     */
    public function getChecked()
    {
        return $this->container['checked'];
    }

    /**
     * Sets checked
     *
     * @param bool|null $checked checked
     *
     * @return self
     */
    public function setChecked($checked)
    {
        if (is_null($checked)) {
            throw new \InvalidArgumentException('non-nullable checked cannot be null');
        }
        $this->container['checked'] = $checked;

        return $this;
    }

    /**
     * Gets radios
     *
     * @return \Yousign\Client\Model\RadioGroupRadiosInner[]
     */
    public function getRadios()
    {
        return $this->container['radios'];
    }

    /**
     * Sets radios
     *
     * @param \Yousign\Client\Model\RadioGroupRadiosInner[] $radios radios
     *
     * @return self
     */
    public function setRadios($radios)
    {
        if (is_null($radios)) {
            throw new \InvalidArgumentException('non-nullable radios cannot be null');
        }
        $this->container['radios'] = $radios;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text text
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        if ((mb_strlen($text) > 5000)) {
            throw new \InvalidArgumentException('invalid length for $text when calling CreateField., must be smaller than or equal to 5000.');
        }

        $this->container['text'] = $text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


