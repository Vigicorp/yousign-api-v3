<?php
/**
 * ConsumptionApp
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yousign\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Public Api v3
 *
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@yousign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yousign\Client\Model;

use \ArrayAccess;
use \Yousign\Client\ObjectSerializer;

/**
 * ConsumptionApp Class Doc Comment
 *
 * @category Class
 * @package  Yousign\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConsumptionApp implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Consumption_app';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'electronic_signature' => 'int',
        'advanced_electronic_signature' => 'int',
        'advanced_electronic_signature_with_qualified_certificate' => 'int',
        'qualified_electronic_signature_identification_mode' => '\Yousign\Client\Model\ConsumptionAppQualifiedElectronicSignatureIdentificationMode'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'electronic_signature' => null,
        'advanced_electronic_signature' => null,
        'advanced_electronic_signature_with_qualified_certificate' => null,
        'qualified_electronic_signature_identification_mode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'electronic_signature' => 'electronic_signature',
        'advanced_electronic_signature' => 'advanced_electronic_signature',
        'advanced_electronic_signature_with_qualified_certificate' => 'advanced_electronic_signature_with_qualified_certificate',
        'qualified_electronic_signature_identification_mode' => 'qualified_electronic_signature_identification_mode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'electronic_signature' => 'setElectronicSignature',
        'advanced_electronic_signature' => 'setAdvancedElectronicSignature',
        'advanced_electronic_signature_with_qualified_certificate' => 'setAdvancedElectronicSignatureWithQualifiedCertificate',
        'qualified_electronic_signature_identification_mode' => 'setQualifiedElectronicSignatureIdentificationMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'electronic_signature' => 'getElectronicSignature',
        'advanced_electronic_signature' => 'getAdvancedElectronicSignature',
        'advanced_electronic_signature_with_qualified_certificate' => 'getAdvancedElectronicSignatureWithQualifiedCertificate',
        'qualified_electronic_signature_identification_mode' => 'getQualifiedElectronicSignatureIdentificationMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['electronic_signature'] = isset($data['electronic_signature']) ? $data['electronic_signature'] : null;
        $this->container['advanced_electronic_signature'] = isset($data['advanced_electronic_signature']) ? $data['advanced_electronic_signature'] : null;
        $this->container['advanced_electronic_signature_with_qualified_certificate'] = isset($data['advanced_electronic_signature_with_qualified_certificate']) ? $data['advanced_electronic_signature_with_qualified_certificate'] : null;
        $this->container['qualified_electronic_signature_identification_mode'] = isset($data['qualified_electronic_signature_identification_mode']) ? $data['qualified_electronic_signature_identification_mode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['electronic_signature'] === null) {
            $invalidProperties[] = "'electronic_signature' can't be null";
        }
        if ($this->container['advanced_electronic_signature'] === null) {
            $invalidProperties[] = "'advanced_electronic_signature' can't be null";
        }
        if ($this->container['advanced_electronic_signature_with_qualified_certificate'] === null) {
            $invalidProperties[] = "'advanced_electronic_signature_with_qualified_certificate' can't be null";
        }
        if ($this->container['qualified_electronic_signature_identification_mode'] === null) {
            $invalidProperties[] = "'qualified_electronic_signature_identification_mode' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets electronic_signature
     *
     * @return int
     */
    public function getElectronicSignature()
    {
        return $this->container['electronic_signature'];
    }

    /**
     * Sets electronic_signature
     *
     * @param int $electronic_signature electronic_signature
     *
     * @return $this
     */
    public function setElectronicSignature($electronic_signature)
    {
        $this->container['electronic_signature'] = $electronic_signature;

        return $this;
    }

    /**
     * Gets advanced_electronic_signature
     *
     * @return int
     */
    public function getAdvancedElectronicSignature()
    {
        return $this->container['advanced_electronic_signature'];
    }

    /**
     * Sets advanced_electronic_signature
     *
     * @param int $advanced_electronic_signature advanced_electronic_signature
     *
     * @return $this
     */
    public function setAdvancedElectronicSignature($advanced_electronic_signature)
    {
        $this->container['advanced_electronic_signature'] = $advanced_electronic_signature;

        return $this;
    }

    /**
     * Gets advanced_electronic_signature_with_qualified_certificate
     *
     * @return int
     */
    public function getAdvancedElectronicSignatureWithQualifiedCertificate()
    {
        return $this->container['advanced_electronic_signature_with_qualified_certificate'];
    }

    /**
     * Sets advanced_electronic_signature_with_qualified_certificate
     *
     * @param int $advanced_electronic_signature_with_qualified_certificate advanced_electronic_signature_with_qualified_certificate
     *
     * @return $this
     */
    public function setAdvancedElectronicSignatureWithQualifiedCertificate($advanced_electronic_signature_with_qualified_certificate)
    {
        $this->container['advanced_electronic_signature_with_qualified_certificate'] = $advanced_electronic_signature_with_qualified_certificate;

        return $this;
    }

    /**
     * Gets qualified_electronic_signature_identification_mode
     *
     * @return \Yousign\Client\Model\ConsumptionAppQualifiedElectronicSignatureIdentificationMode
     */
    public function getQualifiedElectronicSignatureIdentificationMode()
    {
        return $this->container['qualified_electronic_signature_identification_mode'];
    }

    /**
     * Sets qualified_electronic_signature_identification_mode
     *
     * @param \Yousign\Client\Model\ConsumptionAppQualifiedElectronicSignatureIdentificationMode $qualified_electronic_signature_identification_mode qualified_electronic_signature_identification_mode
     *
     * @return $this
     */
    public function setQualifiedElectronicSignatureIdentificationMode($qualified_electronic_signature_identification_mode)
    {
        $this->container['qualified_electronic_signature_identification_mode'] = $qualified_electronic_signature_identification_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
