<?php
/**
 * SignatureRequestInList
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yousign\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Public Api v3
 *
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@yousign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yousign\Client\Model;

use \ArrayAccess;
use \Yousign\Client\ObjectSerializer;

/**
 * SignatureRequestInList Class Doc Comment
 *
 * @category Class
 * @package  Yousign\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SignatureRequestInList implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SignatureRequestInList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'status' => '\Yousign\Client\Model\SignatureRequestStatus',
        'name' => 'string',
        'delivery_mode' => 'string',
        'created_at' => '\DateTime',
        'ordered_signers' => 'bool',
        'reminder_settings' => '\Yousign\Client\Model\SignatureRequestInListReminderSettings',
        'timezone' => 'string',
        'email_custom_note' => 'string',
        'expiration_date' => '\DateTime',
        'source' => 'string',
        'signers' => '\Yousign\Client\Model\SignatureRequestInListSignersInner[]',
        'approvers' => '\Yousign\Client\Model\SignatureRequestInListApproversInner[]',
        'documents' => '\Yousign\Client\Model\SignatureRequestInListDocumentsInner[]',
        'sender' => '\Yousign\Client\Model\SignatureRequestInListSender',
        'external_id' => 'string',
        'branding_id' => 'string',
        'custom_experience_id' => 'string',
        'signers_allowed_to_decline' => 'bool',
        'workspace_id' => 'string',
        'audit_trail_locale' => '\Yousign\Client\Model\AuditTrailLocale',
        'bulk_send_batch_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'status' => null,
        'name' => null,
        'delivery_mode' => null,
        'created_at' => 'date-time',
        'ordered_signers' => null,
        'reminder_settings' => null,
        'timezone' => null,
        'email_custom_note' => null,
        'expiration_date' => 'date-time',
        'source' => null,
        'signers' => null,
        'approvers' => null,
        'documents' => null,
        'sender' => null,
        'external_id' => null,
        'branding_id' => 'uuid',
        'custom_experience_id' => 'uuid',
        'signers_allowed_to_decline' => null,
        'workspace_id' => 'uuid',
        'audit_trail_locale' => null,
        'bulk_send_batch_id' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'name' => 'name',
        'delivery_mode' => 'delivery_mode',
        'created_at' => 'created_at',
        'ordered_signers' => 'ordered_signers',
        'reminder_settings' => 'reminder_settings',
        'timezone' => 'timezone',
        'email_custom_note' => 'email_custom_note',
        'expiration_date' => 'expiration_date',
        'source' => 'source',
        'signers' => 'signers',
        'approvers' => 'approvers',
        'documents' => 'documents',
        'sender' => 'sender',
        'external_id' => 'external_id',
        'branding_id' => 'branding_id',
        'custom_experience_id' => 'custom_experience_id',
        'signers_allowed_to_decline' => 'signers_allowed_to_decline',
        'workspace_id' => 'workspace_id',
        'audit_trail_locale' => 'audit_trail_locale',
        'bulk_send_batch_id' => 'bulk_send_batch_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'name' => 'setName',
        'delivery_mode' => 'setDeliveryMode',
        'created_at' => 'setCreatedAt',
        'ordered_signers' => 'setOrderedSigners',
        'reminder_settings' => 'setReminderSettings',
        'timezone' => 'setTimezone',
        'email_custom_note' => 'setEmailCustomNote',
        'expiration_date' => 'setExpirationDate',
        'source' => 'setSource',
        'signers' => 'setSigners',
        'approvers' => 'setApprovers',
        'documents' => 'setDocuments',
        'sender' => 'setSender',
        'external_id' => 'setExternalId',
        'branding_id' => 'setBrandingId',
        'custom_experience_id' => 'setCustomExperienceId',
        'signers_allowed_to_decline' => 'setSignersAllowedToDecline',
        'workspace_id' => 'setWorkspaceId',
        'audit_trail_locale' => 'setAuditTrailLocale',
        'bulk_send_batch_id' => 'setBulkSendBatchId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'name' => 'getName',
        'delivery_mode' => 'getDeliveryMode',
        'created_at' => 'getCreatedAt',
        'ordered_signers' => 'getOrderedSigners',
        'reminder_settings' => 'getReminderSettings',
        'timezone' => 'getTimezone',
        'email_custom_note' => 'getEmailCustomNote',
        'expiration_date' => 'getExpirationDate',
        'source' => 'getSource',
        'signers' => 'getSigners',
        'approvers' => 'getApprovers',
        'documents' => 'getDocuments',
        'sender' => 'getSender',
        'external_id' => 'getExternalId',
        'branding_id' => 'getBrandingId',
        'custom_experience_id' => 'getCustomExperienceId',
        'signers_allowed_to_decline' => 'getSignersAllowedToDecline',
        'workspace_id' => 'getWorkspaceId',
        'audit_trail_locale' => 'getAuditTrailLocale',
        'bulk_send_batch_id' => 'getBulkSendBatchId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DELIVERY_MODE_EMAIL = 'email';
    const DELIVERY_MODE_NONE = 'none';
    const SOURCE_APP = 'app';
    const SOURCE_PUBLIC_API = 'public_api';
    const SOURCE_CONNECTOR_HUBSPOT_API = 'connector_hubspot_api';
    const SOURCE_CONNECTOR_SALESFORCE_API = 'connector_salesforce_api';
    const SOURCE_CONNECTOR_GOOGLE_API = 'connector_google_api';
    const SOURCE_CONNECTOR_ZAPIER_API = 'connector_zapier_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryModeAllowableValues()
    {
        return [
            self::DELIVERY_MODE_EMAIL,
            self::DELIVERY_MODE_NONE,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_APP,
            self::SOURCE_PUBLIC_API,
            self::SOURCE_CONNECTOR_HUBSPOT_API,
            self::SOURCE_CONNECTOR_SALESFORCE_API,
            self::SOURCE_CONNECTOR_GOOGLE_API,
            self::SOURCE_CONNECTOR_ZAPIER_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['delivery_mode'] = isset($data['delivery_mode']) ? $data['delivery_mode'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['ordered_signers'] = isset($data['ordered_signers']) ? $data['ordered_signers'] : null;
        $this->container['reminder_settings'] = isset($data['reminder_settings']) ? $data['reminder_settings'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['email_custom_note'] = isset($data['email_custom_note']) ? $data['email_custom_note'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['signers'] = isset($data['signers']) ? $data['signers'] : null;
        $this->container['approvers'] = isset($data['approvers']) ? $data['approvers'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['branding_id'] = isset($data['branding_id']) ? $data['branding_id'] : null;
        $this->container['custom_experience_id'] = isset($data['custom_experience_id']) ? $data['custom_experience_id'] : null;
        $this->container['signers_allowed_to_decline'] = isset($data['signers_allowed_to_decline']) ? $data['signers_allowed_to_decline'] : null;
        $this->container['workspace_id'] = isset($data['workspace_id']) ? $data['workspace_id'] : null;
        $this->container['audit_trail_locale'] = isset($data['audit_trail_locale']) ? $data['audit_trail_locale'] : null;
        $this->container['bulk_send_batch_id'] = isset($data['bulk_send_batch_id']) ? $data['bulk_send_batch_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['delivery_mode'] === null) {
            $invalidProperties[] = "'delivery_mode' can't be null";
        }
        $allowedValues = $this->getDeliveryModeAllowableValues();
        if (!is_null($this->container['delivery_mode']) && !in_array($this->container['delivery_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'delivery_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['ordered_signers'] === null) {
            $invalidProperties[] = "'ordered_signers' can't be null";
        }
        if ($this->container['reminder_settings'] === null) {
            $invalidProperties[] = "'reminder_settings' can't be null";
        }
        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        if ($this->container['email_custom_note'] === null) {
            $invalidProperties[] = "'email_custom_note' can't be null";
        }
        if ($this->container['expiration_date'] === null) {
            $invalidProperties[] = "'expiration_date' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'source', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['signers'] === null) {
            $invalidProperties[] = "'signers' can't be null";
        }
        if ($this->container['documents'] === null) {
            $invalidProperties[] = "'documents' can't be null";
        }
        if ($this->container['sender'] === null) {
            $invalidProperties[] = "'sender' can't be null";
        }
        if ($this->container['external_id'] === null) {
            $invalidProperties[] = "'external_id' can't be null";
        }
        if ($this->container['branding_id'] === null) {
            $invalidProperties[] = "'branding_id' can't be null";
        }
        if ($this->container['custom_experience_id'] === null) {
            $invalidProperties[] = "'custom_experience_id' can't be null";
        }
        if ($this->container['signers_allowed_to_decline'] === null) {
            $invalidProperties[] = "'signers_allowed_to_decline' can't be null";
        }
        if ($this->container['audit_trail_locale'] === null) {
            $invalidProperties[] = "'audit_trail_locale' can't be null";
        }
        if ($this->container['bulk_send_batch_id'] === null) {
            $invalidProperties[] = "'bulk_send_batch_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Yousign\Client\Model\SignatureRequestStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Yousign\Client\Model\SignatureRequestStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets delivery_mode
     *
     * @return string
     */
    public function getDeliveryMode()
    {
        return $this->container['delivery_mode'];
    }

    /**
     * Sets delivery_mode
     *
     * @param string $delivery_mode delivery_mode
     *
     * @return $this
     */
    public function setDeliveryMode($delivery_mode)
    {
        $allowedValues = $this->getDeliveryModeAllowableValues();
        if (!in_array($delivery_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'delivery_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_mode'] = $delivery_mode;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets ordered_signers
     *
     * @return bool
     */
    public function getOrderedSigners()
    {
        return $this->container['ordered_signers'];
    }

    /**
     * Sets ordered_signers
     *
     * @param bool $ordered_signers Enable an ordered workflow, each signer will be requested to sign in a sequential order
     *
     * @return $this
     */
    public function setOrderedSigners($ordered_signers)
    {
        $this->container['ordered_signers'] = $ordered_signers;

        return $this;
    }

    /**
     * Gets reminder_settings
     *
     * @return \Yousign\Client\Model\SignatureRequestInListReminderSettings
     */
    public function getReminderSettings()
    {
        return $this->container['reminder_settings'];
    }

    /**
     * Sets reminder_settings
     *
     * @param \Yousign\Client\Model\SignatureRequestInListReminderSettings $reminder_settings reminder_settings
     *
     * @return $this
     */
    public function setReminderSettings($reminder_settings)
    {
        $this->container['reminder_settings'] = $reminder_settings;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone timezone
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets email_custom_note
     *
     * @return string
     */
    public function getEmailCustomNote()
    {
        return $this->container['email_custom_note'];
    }

    /**
     * Sets email_custom_note
     *
     * @param string $email_custom_note email_custom_note
     *
     * @return $this
     */
    public function setEmailCustomNote($email_custom_note)
    {
        $this->container['email_custom_note'] = $email_custom_note;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime $expiration_date expiration_date
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (!in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'source', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets signers
     *
     * @return \Yousign\Client\Model\SignatureRequestInListSignersInner[]
     */
    public function getSigners()
    {
        return $this->container['signers'];
    }

    /**
     * Sets signers
     *
     * @param \Yousign\Client\Model\SignatureRequestInListSignersInner[] $signers signers
     *
     * @return $this
     */
    public function setSigners($signers)
    {
        $this->container['signers'] = $signers;

        return $this;
    }

    /**
     * Gets approvers
     *
     * @return \Yousign\Client\Model\SignatureRequestInListApproversInner[]
     */
    public function getApprovers()
    {
        return $this->container['approvers'];
    }

    /**
     * Sets approvers
     *
     * @param \Yousign\Client\Model\SignatureRequestInListApproversInner[] $approvers approvers
     *
     * @return $this
     */
    public function setApprovers($approvers)
    {
        $this->container['approvers'] = $approvers;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \Yousign\Client\Model\SignatureRequestInListDocumentsInner[]
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \Yousign\Client\Model\SignatureRequestInListDocumentsInner[] $documents documents
     *
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \Yousign\Client\Model\SignatureRequestInListSender
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \Yousign\Client\Model\SignatureRequestInListSender $sender sender
     *
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets branding_id
     *
     * @return string
     */
    public function getBrandingId()
    {
        return $this->container['branding_id'];
    }

    /**
     * Sets branding_id
     *
     * @param string $branding_id branding_id
     *
     * @return $this
     */
    public function setBrandingId($branding_id)
    {
        $this->container['branding_id'] = $branding_id;

        return $this;
    }

    /**
     * Gets custom_experience_id
     *
     * @return string
     */
    public function getCustomExperienceId()
    {
        return $this->container['custom_experience_id'];
    }

    /**
     * Sets custom_experience_id
     *
     * @param string $custom_experience_id custom_experience_id
     *
     * @return $this
     */
    public function setCustomExperienceId($custom_experience_id)
    {
        $this->container['custom_experience_id'] = $custom_experience_id;

        return $this;
    }

    /**
     * Gets signers_allowed_to_decline
     *
     * @return bool
     */
    public function getSignersAllowedToDecline()
    {
        return $this->container['signers_allowed_to_decline'];
    }

    /**
     * Sets signers_allowed_to_decline
     *
     * @param bool $signers_allowed_to_decline signers_allowed_to_decline
     *
     * @return $this
     */
    public function setSignersAllowedToDecline($signers_allowed_to_decline)
    {
        $this->container['signers_allowed_to_decline'] = $signers_allowed_to_decline;

        return $this;
    }

    /**
     * Gets workspace_id
     *
     * @return string
     */
    public function getWorkspaceId()
    {
        return $this->container['workspace_id'];
    }

    /**
     * Sets workspace_id
     *
     * @param string $workspace_id workspace_id
     *
     * @return $this
     */
    public function setWorkspaceId($workspace_id)
    {
        $this->container['workspace_id'] = $workspace_id;

        return $this;
    }

    /**
     * Gets audit_trail_locale
     *
     * @return \Yousign\Client\Model\AuditTrailLocale
     */
    public function getAuditTrailLocale()
    {
        return $this->container['audit_trail_locale'];
    }

    /**
     * Sets audit_trail_locale
     *
     * @param \Yousign\Client\Model\AuditTrailLocale $audit_trail_locale audit_trail_locale
     *
     * @return $this
     */
    public function setAuditTrailLocale($audit_trail_locale)
    {
        $this->container['audit_trail_locale'] = $audit_trail_locale;

        return $this;
    }

    /**
     * Gets bulk_send_batch_id
     *
     * @return string
     */
    public function getBulkSendBatchId()
    {
        return $this->container['bulk_send_batch_id'];
    }

    /**
     * Sets bulk_send_batch_id
     *
     * @param string $bulk_send_batch_id bulk_send_batch_id
     *
     * @return $this
     */
    public function setBulkSendBatchId($bulk_send_batch_id)
    {
        $this->container['bulk_send_batch_id'] = $bulk_send_batch_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
