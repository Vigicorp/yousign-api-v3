<?php
/**
 * SignerApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Public Api v3
 *
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@yousign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SignerApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SignerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteSignatureRequestsSignatureRequestIdSignersSignerId
     *
     * Delete a Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSignatureRequestsSignatureRequestIdSignersSignerId($signature_request_id, $signer_id)
    {
        $this->deleteSignatureRequestsSignatureRequestIdSignersSignerIdWithHttpInfo($signature_request_id, $signer_id);
    }

    /**
     * Operation deleteSignatureRequestsSignatureRequestIdSignersSignerIdWithHttpInfo
     *
     * Delete a Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSignatureRequestsSignatureRequestIdSignersSignerIdWithHttpInfo($signature_request_id, $signer_id)
    {
        $returnType = '';
        $request = $this->deleteSignatureRequestsSignatureRequestIdSignersSignerIdRequest($signature_request_id, $signer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ViolationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PostArchives401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSignatureRequestsSignatureRequestIdSignersSignerIdAsync
     *
     * Delete a Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSignatureRequestsSignatureRequestIdSignersSignerIdAsync($signature_request_id, $signer_id)
    {
        return $this->deleteSignatureRequestsSignatureRequestIdSignersSignerIdAsyncWithHttpInfo($signature_request_id, $signer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSignatureRequestsSignatureRequestIdSignersSignerIdAsyncWithHttpInfo
     *
     * Delete a Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSignatureRequestsSignatureRequestIdSignersSignerIdAsyncWithHttpInfo($signature_request_id, $signer_id)
    {
        $returnType = '';
        $request = $this->deleteSignatureRequestsSignatureRequestIdSignersSignerIdRequest($signature_request_id, $signer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSignatureRequestsSignatureRequestIdSignersSignerId'
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSignatureRequestsSignatureRequestIdSignersSignerIdRequest($signature_request_id, $signer_id)
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling deleteSignatureRequestsSignatureRequestIdSignersSignerId'
            );
        }
        // verify the required parameter 'signer_id' is set
        if ($signer_id === null || (is_array($signer_id) && count($signer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signer_id when calling deleteSignatureRequestsSignatureRequestIdSignersSignerId'
            );
        }

        $resourcePath = '/signature_requests/{signatureRequestId}/signers/{signerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signatureRequestId' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }
        // path params
        if ($signer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signerId' . '}',
                ObjectSerializer::toPathValue($signer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSignatureRequestsSignatureRequestIdSigners
     *
     * List Signature Request's Signers
     *
     * @param  string $signature_request_id Signature Request Id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Signer[]
     */
    public function getSignatureRequestsSignatureRequestIdSigners($signature_request_id)
    {
        list($response) = $this->getSignatureRequestsSignatureRequestIdSignersWithHttpInfo($signature_request_id);
        return $response;
    }

    /**
     * Operation getSignatureRequestsSignatureRequestIdSignersWithHttpInfo
     *
     * List Signature Request's Signers
     *
     * @param  string $signature_request_id Signature Request Id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Signer[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSignatureRequestsSignatureRequestIdSignersWithHttpInfo($signature_request_id)
    {
        $returnType = '\Swagger\Client\Model\Signer[]';
        $request = $this->getSignatureRequestsSignatureRequestIdSignersRequest($signature_request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Signer[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PostArchives401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSignatureRequestsSignatureRequestIdSignersAsync
     *
     * List Signature Request's Signers
     *
     * @param  string $signature_request_id Signature Request Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSignatureRequestsSignatureRequestIdSignersAsync($signature_request_id)
    {
        return $this->getSignatureRequestsSignatureRequestIdSignersAsyncWithHttpInfo($signature_request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSignatureRequestsSignatureRequestIdSignersAsyncWithHttpInfo
     *
     * List Signature Request's Signers
     *
     * @param  string $signature_request_id Signature Request Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSignatureRequestsSignatureRequestIdSignersAsyncWithHttpInfo($signature_request_id)
    {
        $returnType = '\Swagger\Client\Model\Signer[]';
        $request = $this->getSignatureRequestsSignatureRequestIdSignersRequest($signature_request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSignatureRequestsSignatureRequestIdSigners'
     *
     * @param  string $signature_request_id Signature Request Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSignatureRequestsSignatureRequestIdSignersRequest($signature_request_id)
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling getSignatureRequestsSignatureRequestIdSigners'
            );
        }

        $resourcePath = '/signature_requests/{signatureRequestId}/signers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signatureRequestId' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSignersSignersId
     *
     * Get a Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Signer
     */
    public function getSignersSignersId($signature_request_id, $signer_id)
    {
        list($response) = $this->getSignersSignersIdWithHttpInfo($signature_request_id, $signer_id);
        return $response;
    }

    /**
     * Operation getSignersSignersIdWithHttpInfo
     *
     * Get a Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Signer, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSignersSignersIdWithHttpInfo($signature_request_id, $signer_id)
    {
        $returnType = '\Swagger\Client\Model\Signer';
        $request = $this->getSignersSignersIdRequest($signature_request_id, $signer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Signer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PostArchives401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSignersSignersIdAsync
     *
     * Get a Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSignersSignersIdAsync($signature_request_id, $signer_id)
    {
        return $this->getSignersSignersIdAsyncWithHttpInfo($signature_request_id, $signer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSignersSignersIdAsyncWithHttpInfo
     *
     * Get a Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSignersSignersIdAsyncWithHttpInfo($signature_request_id, $signer_id)
    {
        $returnType = '\Swagger\Client\Model\Signer';
        $request = $this->getSignersSignersIdRequest($signature_request_id, $signer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSignersSignersId'
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSignersSignersIdRequest($signature_request_id, $signer_id)
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling getSignersSignersId'
            );
        }
        // verify the required parameter 'signer_id' is set
        if ($signer_id === null || (is_array($signer_id) && count($signer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signer_id when calling getSignersSignersId'
            );
        }

        $resourcePath = '/signature_requests/{signatureRequestId}/signers/{signerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signatureRequestId' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }
        // path params
        if ($signer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signerId' . '}',
                ObjectSerializer::toPathValue($signer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchSignatureRequestsSignatureRequestIdSignersSignerId
     *
     * Update a Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     * @param  \Swagger\Client\Model\UpdateSigner $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Signer
     */
    public function patchSignatureRequestsSignatureRequestIdSignersSignerId($signature_request_id, $signer_id, $body = null)
    {
        list($response) = $this->patchSignatureRequestsSignatureRequestIdSignersSignerIdWithHttpInfo($signature_request_id, $signer_id, $body);
        return $response;
    }

    /**
     * Operation patchSignatureRequestsSignatureRequestIdSignersSignerIdWithHttpInfo
     *
     * Update a Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     * @param  \Swagger\Client\Model\UpdateSigner $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Signer, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchSignatureRequestsSignatureRequestIdSignersSignerIdWithHttpInfo($signature_request_id, $signer_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\Signer';
        $request = $this->patchSignatureRequestsSignatureRequestIdSignersSignerIdRequest($signature_request_id, $signer_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Signer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ViolationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PostArchives401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ViolationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchSignatureRequestsSignatureRequestIdSignersSignerIdAsync
     *
     * Update a Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     * @param  \Swagger\Client\Model\UpdateSigner $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchSignatureRequestsSignatureRequestIdSignersSignerIdAsync($signature_request_id, $signer_id, $body = null)
    {
        return $this->patchSignatureRequestsSignatureRequestIdSignersSignerIdAsyncWithHttpInfo($signature_request_id, $signer_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchSignatureRequestsSignatureRequestIdSignersSignerIdAsyncWithHttpInfo
     *
     * Update a Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     * @param  \Swagger\Client\Model\UpdateSigner $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchSignatureRequestsSignatureRequestIdSignersSignerIdAsyncWithHttpInfo($signature_request_id, $signer_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\Signer';
        $request = $this->patchSignatureRequestsSignatureRequestIdSignersSignerIdRequest($signature_request_id, $signer_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchSignatureRequestsSignatureRequestIdSignersSignerId'
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     * @param  \Swagger\Client\Model\UpdateSigner $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchSignatureRequestsSignatureRequestIdSignersSignerIdRequest($signature_request_id, $signer_id, $body = null)
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling patchSignatureRequestsSignatureRequestIdSignersSignerId'
            );
        }
        // verify the required parameter 'signer_id' is set
        if ($signer_id === null || (is_array($signer_id) && count($signer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signer_id when calling patchSignatureRequestsSignatureRequestIdSignersSignerId'
            );
        }

        $resourcePath = '/signature_requests/{signatureRequestId}/signers/{signerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signatureRequestId' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }
        // path params
        if ($signer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signerId' . '}',
                ObjectSerializer::toPathValue($signer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdSigners
     *
     * Create a new Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  \Swagger\Client\Model\CreateSigner $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Signer
     */
    public function postSignatureRequestsSignatureRequestIdSigners($signature_request_id, $body = null)
    {
        list($response) = $this->postSignatureRequestsSignatureRequestIdSignersWithHttpInfo($signature_request_id, $body);
        return $response;
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersWithHttpInfo
     *
     * Create a new Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  \Swagger\Client\Model\CreateSigner $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Signer, HTTP status code, HTTP response headers (array of strings)
     */
    public function postSignatureRequestsSignatureRequestIdSignersWithHttpInfo($signature_request_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\Signer';
        $request = $this->postSignatureRequestsSignatureRequestIdSignersRequest($signature_request_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Signer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ViolationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PostArchives401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ViolationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersAsync
     *
     * Create a new Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  \Swagger\Client\Model\CreateSigner $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSignatureRequestsSignatureRequestIdSignersAsync($signature_request_id, $body = null)
    {
        return $this->postSignatureRequestsSignatureRequestIdSignersAsyncWithHttpInfo($signature_request_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersAsyncWithHttpInfo
     *
     * Create a new Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  \Swagger\Client\Model\CreateSigner $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSignatureRequestsSignatureRequestIdSignersAsyncWithHttpInfo($signature_request_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\Signer';
        $request = $this->postSignatureRequestsSignatureRequestIdSignersRequest($signature_request_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postSignatureRequestsSignatureRequestIdSigners'
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  \Swagger\Client\Model\CreateSigner $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postSignatureRequestsSignatureRequestIdSignersRequest($signature_request_id, $body = null)
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling postSignatureRequestsSignatureRequestIdSigners'
            );
        }

        $resourcePath = '/signature_requests/{signatureRequestId}/signers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signatureRequestId' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersSignerIdSendOtp
     *
     * Send a One-Time Password (OTP) to a Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postSignatureRequestsSignatureRequestIdSignersSignerIdSendOtp($signature_request_id, $signer_id)
    {
        $this->postSignatureRequestsSignatureRequestIdSignersSignerIdSendOtpWithHttpInfo($signature_request_id, $signer_id);
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersSignerIdSendOtpWithHttpInfo
     *
     * Send a One-Time Password (OTP) to a Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postSignatureRequestsSignatureRequestIdSignersSignerIdSendOtpWithHttpInfo($signature_request_id, $signer_id)
    {
        $returnType = '';
        $request = $this->postSignatureRequestsSignatureRequestIdSignersSignerIdSendOtpRequest($signature_request_id, $signer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ViolationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PostArchives401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersSignerIdSendOtpAsync
     *
     * Send a One-Time Password (OTP) to a Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSignatureRequestsSignatureRequestIdSignersSignerIdSendOtpAsync($signature_request_id, $signer_id)
    {
        return $this->postSignatureRequestsSignatureRequestIdSignersSignerIdSendOtpAsyncWithHttpInfo($signature_request_id, $signer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersSignerIdSendOtpAsyncWithHttpInfo
     *
     * Send a One-Time Password (OTP) to a Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSignatureRequestsSignatureRequestIdSignersSignerIdSendOtpAsyncWithHttpInfo($signature_request_id, $signer_id)
    {
        $returnType = '';
        $request = $this->postSignatureRequestsSignatureRequestIdSignersSignerIdSendOtpRequest($signature_request_id, $signer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postSignatureRequestsSignatureRequestIdSignersSignerIdSendOtp'
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postSignatureRequestsSignatureRequestIdSignersSignerIdSendOtpRequest($signature_request_id, $signer_id)
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling postSignatureRequestsSignatureRequestIdSignersSignerIdSendOtp'
            );
        }
        // verify the required parameter 'signer_id' is set
        if ($signer_id === null || (is_array($signer_id) && count($signer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signer_id when calling postSignatureRequestsSignatureRequestIdSignersSignerIdSendOtp'
            );
        }

        $resourcePath = '/signature_requests/{signatureRequestId}/signers/{signerId}/send_otp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signatureRequestId' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }
        // path params
        if ($signer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signerId' . '}',
                ObjectSerializer::toPathValue($signer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminder
     *
     * Send manual reminder to a Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminder($signature_request_id, $signer_id)
    {
        $this->postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminderWithHttpInfo($signature_request_id, $signer_id);
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminderWithHttpInfo
     *
     * Send manual reminder to a Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminderWithHttpInfo($signature_request_id, $signer_id)
    {
        $returnType = '';
        $request = $this->postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminderRequest($signature_request_id, $signer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ViolationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PostArchives401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminderAsync
     *
     * Send manual reminder to a Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminderAsync($signature_request_id, $signer_id)
    {
        return $this->postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminderAsyncWithHttpInfo($signature_request_id, $signer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminderAsyncWithHttpInfo
     *
     * Send manual reminder to a Signer
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminderAsyncWithHttpInfo($signature_request_id, $signer_id)
    {
        $returnType = '';
        $request = $this->postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminderRequest($signature_request_id, $signer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminder'
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminderRequest($signature_request_id, $signer_id)
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminder'
            );
        }
        // verify the required parameter 'signer_id' is set
        if ($signer_id === null || (is_array($signer_id) && count($signer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signer_id when calling postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminder'
            );
        }

        $resourcePath = '/signature_requests/{signatureRequestId}/signers/{signerId}/send_reminder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signatureRequestId' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }
        // path params
        if ($signer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signerId' . '}',
                ObjectSerializer::toPathValue($signer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersSignerIdSign
     *
     * Sign a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     * @param  \Swagger\Client\Model\SignerSign $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postSignatureRequestsSignatureRequestIdSignersSignerIdSign($signature_request_id, $signer_id, $body = null)
    {
        $this->postSignatureRequestsSignatureRequestIdSignersSignerIdSignWithHttpInfo($signature_request_id, $signer_id, $body);
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersSignerIdSignWithHttpInfo
     *
     * Sign a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     * @param  \Swagger\Client\Model\SignerSign $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postSignatureRequestsSignatureRequestIdSignersSignerIdSignWithHttpInfo($signature_request_id, $signer_id, $body = null)
    {
        $returnType = '';
        $request = $this->postSignatureRequestsSignatureRequestIdSignersSignerIdSignRequest($signature_request_id, $signer_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ViolationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PostArchives401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersSignerIdSignAsync
     *
     * Sign a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     * @param  \Swagger\Client\Model\SignerSign $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSignatureRequestsSignatureRequestIdSignersSignerIdSignAsync($signature_request_id, $signer_id, $body = null)
    {
        return $this->postSignatureRequestsSignatureRequestIdSignersSignerIdSignAsyncWithHttpInfo($signature_request_id, $signer_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersSignerIdSignAsyncWithHttpInfo
     *
     * Sign a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     * @param  \Swagger\Client\Model\SignerSign $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSignatureRequestsSignatureRequestIdSignersSignerIdSignAsyncWithHttpInfo($signature_request_id, $signer_id, $body = null)
    {
        $returnType = '';
        $request = $this->postSignatureRequestsSignatureRequestIdSignersSignerIdSignRequest($signature_request_id, $signer_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postSignatureRequestsSignatureRequestIdSignersSignerIdSign'
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     * @param  \Swagger\Client\Model\SignerSign $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postSignatureRequestsSignatureRequestIdSignersSignerIdSignRequest($signature_request_id, $signer_id, $body = null)
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling postSignatureRequestsSignatureRequestIdSignersSignerIdSign'
            );
        }
        // verify the required parameter 'signer_id' is set
        if ($signer_id === null || (is_array($signer_id) && count($signer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signer_id when calling postSignatureRequestsSignatureRequestIdSignersSignerIdSign'
            );
        }

        $resourcePath = '/signature_requests/{signatureRequestId}/signers/{signerId}/sign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signatureRequestId' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }
        // path params
        if ($signer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signerId' . '}',
                ObjectSerializer::toPathValue($signer_id),
                $resourcePath
            );
        }

        // form params
        if ($otp !== null) {
            $formParams['otp'] = ObjectSerializer::toFormValue($otp);
        }
        // form params
        if ($ip_address !== null) {
            $formParams['ip_address'] = ObjectSerializer::toFormValue($ip_address);
        }
        // form params
        if ($consent_given_at !== null) {
            $formParams['consent_given_at'] = ObjectSerializer::toFormValue($consent_given_at);
        }
        // form params
        if ($signature_image !== null) {
            $multipart = true;
            $formParams['signature_image'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($signature_image), 'rb');
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersSignerIdSign
     *
     * Sign a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     * @param  string $otp otp (optional)
     * @param  \Swagger\Client\Model\SignerSIPAddress $ip_address ip_address (optional)
     * @param  \DateTime $consent_given_at consent_given_at (optional)
     * @param  string $signature_image signature_image (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postSignatureRequestsSignatureRequestIdSignersSignerIdSign($signature_request_id, $signer_id, $otp = null, $ip_address = null, $consent_given_at = null, $signature_image = null)
    {
        $this->postSignatureRequestsSignatureRequestIdSignersSignerIdSignWithHttpInfo($signature_request_id, $signer_id, $otp, $ip_address, $consent_given_at, $signature_image);
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersSignerIdSignWithHttpInfo
     *
     * Sign a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     * @param  string $otp (optional)
     * @param  \Swagger\Client\Model\SignerSIPAddress $ip_address (optional)
     * @param  \DateTime $consent_given_at (optional)
     * @param  string $signature_image (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postSignatureRequestsSignatureRequestIdSignersSignerIdSignWithHttpInfo($signature_request_id, $signer_id, $otp = null, $ip_address = null, $consent_given_at = null, $signature_image = null)
    {
        $returnType = '';
        $request = $this->postSignatureRequestsSignatureRequestIdSignersSignerIdSignRequest($signature_request_id, $signer_id, $otp, $ip_address, $consent_given_at, $signature_image);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ViolationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PostArchives401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersSignerIdSignAsync
     *
     * Sign a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     * @param  string $otp (optional)
     * @param  \Swagger\Client\Model\SignerSIPAddress $ip_address (optional)
     * @param  \DateTime $consent_given_at (optional)
     * @param  string $signature_image (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSignatureRequestsSignatureRequestIdSignersSignerIdSignAsync($signature_request_id, $signer_id, $otp = null, $ip_address = null, $consent_given_at = null, $signature_image = null)
    {
        return $this->postSignatureRequestsSignatureRequestIdSignersSignerIdSignAsyncWithHttpInfo($signature_request_id, $signer_id, $otp, $ip_address, $consent_given_at, $signature_image)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersSignerIdSignAsyncWithHttpInfo
     *
     * Sign a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     * @param  string $otp (optional)
     * @param  \Swagger\Client\Model\SignerSIPAddress $ip_address (optional)
     * @param  \DateTime $consent_given_at (optional)
     * @param  string $signature_image (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSignatureRequestsSignatureRequestIdSignersSignerIdSignAsyncWithHttpInfo($signature_request_id, $signer_id, $otp = null, $ip_address = null, $consent_given_at = null, $signature_image = null)
    {
        $returnType = '';
        $request = $this->postSignatureRequestsSignatureRequestIdSignersSignerIdSignRequest($signature_request_id, $signer_id, $otp, $ip_address, $consent_given_at, $signature_image);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postSignatureRequestsSignatureRequestIdSignersSignerIdSign'
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $signer_id Signer Id (required)
     * @param  string $otp (optional)
     * @param  \Swagger\Client\Model\SignerSIPAddress $ip_address (optional)
     * @param  \DateTime $consent_given_at (optional)
     * @param  string $signature_image (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postSignatureRequestsSignatureRequestIdSignersSignerIdSignRequest($signature_request_id, $signer_id, $otp = null, $ip_address = null, $consent_given_at = null, $signature_image = null)
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling postSignatureRequestsSignatureRequestIdSignersSignerIdSign'
            );
        }
        // verify the required parameter 'signer_id' is set
        if ($signer_id === null || (is_array($signer_id) && count($signer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signer_id when calling postSignatureRequestsSignatureRequestIdSignersSignerIdSign'
            );
        }

        $resourcePath = '/signature_requests/{signatureRequestId}/signers/{signerId}/sign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signatureRequestId' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }
        // path params
        if ($signer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signerId' . '}',
                ObjectSerializer::toPathValue($signer_id),
                $resourcePath
            );
        }

        // form params
        if ($otp !== null) {
            $formParams['otp'] = ObjectSerializer::toFormValue($otp);
        }
        // form params
        if ($ip_address !== null) {
            $formParams['ip_address'] = ObjectSerializer::toFormValue($ip_address);
        }
        // form params
        if ($consent_given_at !== null) {
            $formParams['consent_given_at'] = ObjectSerializer::toFormValue($consent_given_at);
        }
        // form params
        if ($signature_image !== null) {
            $multipart = true;
            $formParams['signature_image'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($signature_image), 'rb');
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
