<?php
/**
 * SignatureRequestApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Yousign\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Public Api v3
 *
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: contact@yousign.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Yousign\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Yousign\Client\ApiException;
use Yousign\Client\Configuration;
use Yousign\Client\HeaderSelector;
use Yousign\Client\ObjectSerializer;

/**
 * SignatureRequestApi Class Doc Comment
 *
 * @category Class
 * @package  Yousign\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SignatureRequestApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteSignatureRequestsSignatureRequestId' => [
            'application/json',
        ],
        'getSignatureRequests' => [
            'application/json',
        ],
        'getSignatureRequestsSignatureRequestId' => [
            'application/json',
        ],
        'patchSignatureRequestsSignatureRequestId' => [
            'application/json',
        ],
        'postSignatureRequests' => [
            'application/json',
        ],
        'postSignatureRequestsSignatureRequestIdActivate' => [
            'application/json',
        ],
        'postSignatureRequestsSignatureRequestIdCancel' => [
            'application/json',
        ],
        'postSignatureRequestsSignatureRequestIdReactivate' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteSignatureRequestsSignatureRequestId
     *
     * Delete a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  bool $permanent_delete If true it will permanently delete the Signature Request. It will no longer be retrievable. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSignatureRequestsSignatureRequestId'] to see the possible values for this operation
     *
     * @throws \Yousign\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSignatureRequestsSignatureRequestId($signature_request_id, $permanent_delete = false, string $contentType = self::contentTypes['deleteSignatureRequestsSignatureRequestId'][0])
    {
        $this->deleteSignatureRequestsSignatureRequestIdWithHttpInfo($signature_request_id, $permanent_delete, $contentType);
    }

    /**
     * Operation deleteSignatureRequestsSignatureRequestIdWithHttpInfo
     *
     * Delete a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  bool $permanent_delete If true it will permanently delete the Signature Request. It will no longer be retrievable. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSignatureRequestsSignatureRequestId'] to see the possible values for this operation
     *
     * @throws \Yousign\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSignatureRequestsSignatureRequestIdWithHttpInfo($signature_request_id, $permanent_delete = false, string $contentType = self::contentTypes['deleteSignatureRequestsSignatureRequestId'][0])
    {
        $request = $this->deleteSignatureRequestsSignatureRequestIdRequest($signature_request_id, $permanent_delete, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\ViolationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\PostArchives401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSignatureRequestsSignatureRequestIdAsync
     *
     * Delete a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  bool $permanent_delete If true it will permanently delete the Signature Request. It will no longer be retrievable. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSignatureRequestsSignatureRequestId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSignatureRequestsSignatureRequestIdAsync($signature_request_id, $permanent_delete = false, string $contentType = self::contentTypes['deleteSignatureRequestsSignatureRequestId'][0])
    {
        return $this->deleteSignatureRequestsSignatureRequestIdAsyncWithHttpInfo($signature_request_id, $permanent_delete, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSignatureRequestsSignatureRequestIdAsyncWithHttpInfo
     *
     * Delete a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  bool $permanent_delete If true it will permanently delete the Signature Request. It will no longer be retrievable. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSignatureRequestsSignatureRequestId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSignatureRequestsSignatureRequestIdAsyncWithHttpInfo($signature_request_id, $permanent_delete = false, string $contentType = self::contentTypes['deleteSignatureRequestsSignatureRequestId'][0])
    {
        $returnType = '';
        $request = $this->deleteSignatureRequestsSignatureRequestIdRequest($signature_request_id, $permanent_delete, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSignatureRequestsSignatureRequestId'
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  bool $permanent_delete If true it will permanently delete the Signature Request. It will no longer be retrievable. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSignatureRequestsSignatureRequestId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSignatureRequestsSignatureRequestIdRequest($signature_request_id, $permanent_delete = false, string $contentType = self::contentTypes['deleteSignatureRequestsSignatureRequestId'][0])
    {

        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling deleteSignatureRequestsSignatureRequestId'
            );
        }
        if (!preg_match("/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/", $signature_request_id)) {
            throw new \InvalidArgumentException("invalid value for \"signature_request_id\" when calling SignatureRequestApi.deleteSignatureRequestsSignatureRequestId, must conform to the pattern /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/.");
        }
        


        $resourcePath = '/signature_requests/{signatureRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $permanent_delete,
            'permanent_delete', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signatureRequestId' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSignatureRequests
     *
     * List Signature Requests
     *
     * @param  string $status Filter by status (optional)
     * @param  string $after After cursor (pagination) (optional)
     * @param  int $limit The limit of items count to retrieve. (optional, default to 100)
     * @param  string $external_id Filter by external_id (optional)
     * @param  string[] $source Filter by source (optional)
     * @param  string $q Search on name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSignatureRequests'] to see the possible values for this operation
     *
     * @throws \Yousign\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Yousign\Client\Model\GetSignatureRequests200Response|\Yousign\Client\Model\ViolationResponse|\Yousign\Client\Model\PostArchives401Response|object
     */
    public function getSignatureRequests($status = null, $after = null, $limit = 100, $external_id = null, $source = null, $q = null, string $contentType = self::contentTypes['getSignatureRequests'][0])
    {
        list($response) = $this->getSignatureRequestsWithHttpInfo($status, $after, $limit, $external_id, $source, $q, $contentType);
        return $response;
    }

    /**
     * Operation getSignatureRequestsWithHttpInfo
     *
     * List Signature Requests
     *
     * @param  string $status Filter by status (optional)
     * @param  string $after After cursor (pagination) (optional)
     * @param  int $limit The limit of items count to retrieve. (optional, default to 100)
     * @param  string $external_id Filter by external_id (optional)
     * @param  string[] $source Filter by source (optional)
     * @param  string $q Search on name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSignatureRequests'] to see the possible values for this operation
     *
     * @throws \Yousign\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Yousign\Client\Model\GetSignatureRequests200Response|\Yousign\Client\Model\ViolationResponse|\Yousign\Client\Model\PostArchives401Response|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSignatureRequestsWithHttpInfo($status = null, $after = null, $limit = 100, $external_id = null, $source = null, $q = null, string $contentType = self::contentTypes['getSignatureRequests'][0])
    {
        $request = $this->getSignatureRequestsRequest($status, $after, $limit, $external_id, $source, $q, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Yousign\Client\Model\GetSignatureRequests200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\GetSignatureRequests200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\GetSignatureRequests200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Yousign\Client\Model\ViolationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\ViolationResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\ViolationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Yousign\Client\Model\PostArchives401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\PostArchives401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\PostArchives401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Yousign\Client\Model\GetSignatureRequests200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\GetSignatureRequests200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\ViolationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\PostArchives401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSignatureRequestsAsync
     *
     * List Signature Requests
     *
     * @param  string $status Filter by status (optional)
     * @param  string $after After cursor (pagination) (optional)
     * @param  int $limit The limit of items count to retrieve. (optional, default to 100)
     * @param  string $external_id Filter by external_id (optional)
     * @param  string[] $source Filter by source (optional)
     * @param  string $q Search on name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSignatureRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSignatureRequestsAsync($status = null, $after = null, $limit = 100, $external_id = null, $source = null, $q = null, string $contentType = self::contentTypes['getSignatureRequests'][0])
    {
        return $this->getSignatureRequestsAsyncWithHttpInfo($status, $after, $limit, $external_id, $source, $q, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSignatureRequestsAsyncWithHttpInfo
     *
     * List Signature Requests
     *
     * @param  string $status Filter by status (optional)
     * @param  string $after After cursor (pagination) (optional)
     * @param  int $limit The limit of items count to retrieve. (optional, default to 100)
     * @param  string $external_id Filter by external_id (optional)
     * @param  string[] $source Filter by source (optional)
     * @param  string $q Search on name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSignatureRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSignatureRequestsAsyncWithHttpInfo($status = null, $after = null, $limit = 100, $external_id = null, $source = null, $q = null, string $contentType = self::contentTypes['getSignatureRequests'][0])
    {
        $returnType = '\Yousign\Client\Model\GetSignatureRequests200Response';
        $request = $this->getSignatureRequestsRequest($status, $after, $limit, $external_id, $source, $q, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSignatureRequests'
     *
     * @param  string $status Filter by status (optional)
     * @param  string $after After cursor (pagination) (optional)
     * @param  int $limit The limit of items count to retrieve. (optional, default to 100)
     * @param  string $external_id Filter by external_id (optional)
     * @param  string[] $source Filter by source (optional)
     * @param  string $q Search on name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSignatureRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSignatureRequestsRequest($status = null, $after = null, $limit = 100, $external_id = null, $source = null, $q = null, string $contentType = self::contentTypes['getSignatureRequests'][0])
    {



        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling SignatureRequestApi.getSignatureRequests, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling SignatureRequestApi.getSignatureRequests, must be bigger than or equal to 1.');
        }
        
        if ($external_id !== null && !preg_match("/^[\\w\\-@.%+]+$/", $external_id)) {
            throw new \InvalidArgumentException("invalid value for \"external_id\" when calling SignatureRequestApi.getSignatureRequests, must conform to the pattern /^[\\w\\-@.%+]+$/.");
        }
        

        if ($q !== null && strlen($q) < 3) {
            throw new \InvalidArgumentException('invalid length for "$q" when calling SignatureRequestApi.getSignatureRequests, must be bigger than or equal to 3.');
        }
        

        $resourcePath = '/signature_requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_id,
            'external_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source,
            'source[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSignatureRequestsSignatureRequestId
     *
     * Fetch a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSignatureRequestsSignatureRequestId'] to see the possible values for this operation
     *
     * @throws \Yousign\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Yousign\Client\Model\SignatureRequest|\Yousign\Client\Model\ViolationResponse|\Yousign\Client\Model\PostArchives401Response|object|object
     */
    public function getSignatureRequestsSignatureRequestId($signature_request_id, string $contentType = self::contentTypes['getSignatureRequestsSignatureRequestId'][0])
    {
        list($response) = $this->getSignatureRequestsSignatureRequestIdWithHttpInfo($signature_request_id, $contentType);
        return $response;
    }

    /**
     * Operation getSignatureRequestsSignatureRequestIdWithHttpInfo
     *
     * Fetch a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSignatureRequestsSignatureRequestId'] to see the possible values for this operation
     *
     * @throws \Yousign\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Yousign\Client\Model\SignatureRequest|\Yousign\Client\Model\ViolationResponse|\Yousign\Client\Model\PostArchives401Response|object|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSignatureRequestsSignatureRequestIdWithHttpInfo($signature_request_id, string $contentType = self::contentTypes['getSignatureRequestsSignatureRequestId'][0])
    {
        $request = $this->getSignatureRequestsSignatureRequestIdRequest($signature_request_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Yousign\Client\Model\SignatureRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\SignatureRequest' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\SignatureRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Yousign\Client\Model\ViolationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\ViolationResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\ViolationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Yousign\Client\Model\PostArchives401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\PostArchives401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\PostArchives401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Yousign\Client\Model\SignatureRequest';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\SignatureRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\ViolationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\PostArchives401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSignatureRequestsSignatureRequestIdAsync
     *
     * Fetch a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSignatureRequestsSignatureRequestId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSignatureRequestsSignatureRequestIdAsync($signature_request_id, string $contentType = self::contentTypes['getSignatureRequestsSignatureRequestId'][0])
    {
        return $this->getSignatureRequestsSignatureRequestIdAsyncWithHttpInfo($signature_request_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSignatureRequestsSignatureRequestIdAsyncWithHttpInfo
     *
     * Fetch a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSignatureRequestsSignatureRequestId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSignatureRequestsSignatureRequestIdAsyncWithHttpInfo($signature_request_id, string $contentType = self::contentTypes['getSignatureRequestsSignatureRequestId'][0])
    {
        $returnType = '\Yousign\Client\Model\SignatureRequest';
        $request = $this->getSignatureRequestsSignatureRequestIdRequest($signature_request_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSignatureRequestsSignatureRequestId'
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSignatureRequestsSignatureRequestId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSignatureRequestsSignatureRequestIdRequest($signature_request_id, string $contentType = self::contentTypes['getSignatureRequestsSignatureRequestId'][0])
    {

        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling getSignatureRequestsSignatureRequestId'
            );
        }
        if (!preg_match("/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/", $signature_request_id)) {
            throw new \InvalidArgumentException("invalid value for \"signature_request_id\" when calling SignatureRequestApi.getSignatureRequestsSignatureRequestId, must conform to the pattern /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/.");
        }
        

        $resourcePath = '/signature_requests/{signatureRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signatureRequestId' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchSignatureRequestsSignatureRequestId
     *
     * Update a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  \Yousign\Client\Model\UpdateSignatureRequest $update_signature_request update_signature_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchSignatureRequestsSignatureRequestId'] to see the possible values for this operation
     *
     * @throws \Yousign\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Yousign\Client\Model\SignatureRequest|\Yousign\Client\Model\ViolationResponse|\Yousign\Client\Model\PostArchives401Response|object|object|\Yousign\Client\Model\ViolationResponse
     */
    public function patchSignatureRequestsSignatureRequestId($signature_request_id, $update_signature_request = null, string $contentType = self::contentTypes['patchSignatureRequestsSignatureRequestId'][0])
    {
        list($response) = $this->patchSignatureRequestsSignatureRequestIdWithHttpInfo($signature_request_id, $update_signature_request, $contentType);
        return $response;
    }

    /**
     * Operation patchSignatureRequestsSignatureRequestIdWithHttpInfo
     *
     * Update a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  \Yousign\Client\Model\UpdateSignatureRequest $update_signature_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchSignatureRequestsSignatureRequestId'] to see the possible values for this operation
     *
     * @throws \Yousign\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Yousign\Client\Model\SignatureRequest|\Yousign\Client\Model\ViolationResponse|\Yousign\Client\Model\PostArchives401Response|object|object|\Yousign\Client\Model\ViolationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchSignatureRequestsSignatureRequestIdWithHttpInfo($signature_request_id, $update_signature_request = null, string $contentType = self::contentTypes['patchSignatureRequestsSignatureRequestId'][0])
    {
        $request = $this->patchSignatureRequestsSignatureRequestIdRequest($signature_request_id, $update_signature_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Yousign\Client\Model\SignatureRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\SignatureRequest' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\SignatureRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Yousign\Client\Model\ViolationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\ViolationResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\ViolationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Yousign\Client\Model\PostArchives401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\PostArchives401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\PostArchives401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Yousign\Client\Model\ViolationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\ViolationResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\ViolationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Yousign\Client\Model\SignatureRequest';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\SignatureRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\ViolationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\PostArchives401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\ViolationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchSignatureRequestsSignatureRequestIdAsync
     *
     * Update a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  \Yousign\Client\Model\UpdateSignatureRequest $update_signature_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchSignatureRequestsSignatureRequestId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchSignatureRequestsSignatureRequestIdAsync($signature_request_id, $update_signature_request = null, string $contentType = self::contentTypes['patchSignatureRequestsSignatureRequestId'][0])
    {
        return $this->patchSignatureRequestsSignatureRequestIdAsyncWithHttpInfo($signature_request_id, $update_signature_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchSignatureRequestsSignatureRequestIdAsyncWithHttpInfo
     *
     * Update a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  \Yousign\Client\Model\UpdateSignatureRequest $update_signature_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchSignatureRequestsSignatureRequestId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchSignatureRequestsSignatureRequestIdAsyncWithHttpInfo($signature_request_id, $update_signature_request = null, string $contentType = self::contentTypes['patchSignatureRequestsSignatureRequestId'][0])
    {
        $returnType = '\Yousign\Client\Model\SignatureRequest';
        $request = $this->patchSignatureRequestsSignatureRequestIdRequest($signature_request_id, $update_signature_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchSignatureRequestsSignatureRequestId'
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  \Yousign\Client\Model\UpdateSignatureRequest $update_signature_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchSignatureRequestsSignatureRequestId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchSignatureRequestsSignatureRequestIdRequest($signature_request_id, $update_signature_request = null, string $contentType = self::contentTypes['patchSignatureRequestsSignatureRequestId'][0])
    {

        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling patchSignatureRequestsSignatureRequestId'
            );
        }
        if (!preg_match("/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/", $signature_request_id)) {
            throw new \InvalidArgumentException("invalid value for \"signature_request_id\" when calling SignatureRequestApi.patchSignatureRequestsSignatureRequestId, must conform to the pattern /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/.");
        }
        


        $resourcePath = '/signature_requests/{signatureRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signatureRequestId' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_signature_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_signature_request));
            } else {
                $httpBody = $update_signature_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postSignatureRequests
     *
     * Initiate a new Signature Request
     *
     * @param  \Yousign\Client\Model\CreateSignatureRequest $create_signature_request create_signature_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSignatureRequests'] to see the possible values for this operation
     *
     * @throws \Yousign\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Yousign\Client\Model\SignatureRequest|\Yousign\Client\Model\ViolationResponse|\Yousign\Client\Model\PostArchives401Response|object|object|\Yousign\Client\Model\ViolationResponse
     */
    public function postSignatureRequests($create_signature_request = null, string $contentType = self::contentTypes['postSignatureRequests'][0])
    {
        list($response) = $this->postSignatureRequestsWithHttpInfo($create_signature_request, $contentType);
        return $response;
    }

    /**
     * Operation postSignatureRequestsWithHttpInfo
     *
     * Initiate a new Signature Request
     *
     * @param  \Yousign\Client\Model\CreateSignatureRequest $create_signature_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSignatureRequests'] to see the possible values for this operation
     *
     * @throws \Yousign\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Yousign\Client\Model\SignatureRequest|\Yousign\Client\Model\ViolationResponse|\Yousign\Client\Model\PostArchives401Response|object|object|\Yousign\Client\Model\ViolationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postSignatureRequestsWithHttpInfo($create_signature_request = null, string $contentType = self::contentTypes['postSignatureRequests'][0])
    {
        $request = $this->postSignatureRequestsRequest($create_signature_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Yousign\Client\Model\SignatureRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\SignatureRequest' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\SignatureRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Yousign\Client\Model\ViolationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\ViolationResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\ViolationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Yousign\Client\Model\PostArchives401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\PostArchives401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\PostArchives401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Yousign\Client\Model\ViolationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\ViolationResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\ViolationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Yousign\Client\Model\SignatureRequest';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\SignatureRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\ViolationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\PostArchives401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\ViolationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postSignatureRequestsAsync
     *
     * Initiate a new Signature Request
     *
     * @param  \Yousign\Client\Model\CreateSignatureRequest $create_signature_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSignatureRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSignatureRequestsAsync($create_signature_request = null, string $contentType = self::contentTypes['postSignatureRequests'][0])
    {
        return $this->postSignatureRequestsAsyncWithHttpInfo($create_signature_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postSignatureRequestsAsyncWithHttpInfo
     *
     * Initiate a new Signature Request
     *
     * @param  \Yousign\Client\Model\CreateSignatureRequest $create_signature_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSignatureRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSignatureRequestsAsyncWithHttpInfo($create_signature_request = null, string $contentType = self::contentTypes['postSignatureRequests'][0])
    {
        $returnType = '\Yousign\Client\Model\SignatureRequest';
        $request = $this->postSignatureRequestsRequest($create_signature_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postSignatureRequests'
     *
     * @param  \Yousign\Client\Model\CreateSignatureRequest $create_signature_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSignatureRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postSignatureRequestsRequest($create_signature_request = null, string $contentType = self::contentTypes['postSignatureRequests'][0])
    {



        $resourcePath = '/signature_requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_signature_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_signature_request));
            } else {
                $httpBody = $create_signature_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdActivate
     *
     * Activate a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSignatureRequestsSignatureRequestIdActivate'] to see the possible values for this operation
     *
     * @throws \Yousign\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Yousign\Client\Model\SignatureRequestActivated|\Yousign\Client\Model\ViolationResponse|\Yousign\Client\Model\PostArchives401Response|object|object
     */
    public function postSignatureRequestsSignatureRequestIdActivate($signature_request_id, string $contentType = self::contentTypes['postSignatureRequestsSignatureRequestIdActivate'][0])
    {
        list($response) = $this->postSignatureRequestsSignatureRequestIdActivateWithHttpInfo($signature_request_id, $contentType);
        return $response;
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdActivateWithHttpInfo
     *
     * Activate a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSignatureRequestsSignatureRequestIdActivate'] to see the possible values for this operation
     *
     * @throws \Yousign\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Yousign\Client\Model\SignatureRequestActivated|\Yousign\Client\Model\ViolationResponse|\Yousign\Client\Model\PostArchives401Response|object|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function postSignatureRequestsSignatureRequestIdActivateWithHttpInfo($signature_request_id, string $contentType = self::contentTypes['postSignatureRequestsSignatureRequestIdActivate'][0])
    {
        $request = $this->postSignatureRequestsSignatureRequestIdActivateRequest($signature_request_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Yousign\Client\Model\SignatureRequestActivated' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\SignatureRequestActivated' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\SignatureRequestActivated', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Yousign\Client\Model\ViolationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\ViolationResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\ViolationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Yousign\Client\Model\PostArchives401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\PostArchives401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\PostArchives401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Yousign\Client\Model\SignatureRequestActivated';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\SignatureRequestActivated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\ViolationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\PostArchives401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdActivateAsync
     *
     * Activate a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSignatureRequestsSignatureRequestIdActivate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSignatureRequestsSignatureRequestIdActivateAsync($signature_request_id, string $contentType = self::contentTypes['postSignatureRequestsSignatureRequestIdActivate'][0])
    {
        return $this->postSignatureRequestsSignatureRequestIdActivateAsyncWithHttpInfo($signature_request_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdActivateAsyncWithHttpInfo
     *
     * Activate a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSignatureRequestsSignatureRequestIdActivate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSignatureRequestsSignatureRequestIdActivateAsyncWithHttpInfo($signature_request_id, string $contentType = self::contentTypes['postSignatureRequestsSignatureRequestIdActivate'][0])
    {
        $returnType = '\Yousign\Client\Model\SignatureRequestActivated';
        $request = $this->postSignatureRequestsSignatureRequestIdActivateRequest($signature_request_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postSignatureRequestsSignatureRequestIdActivate'
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSignatureRequestsSignatureRequestIdActivate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postSignatureRequestsSignatureRequestIdActivateRequest($signature_request_id, string $contentType = self::contentTypes['postSignatureRequestsSignatureRequestIdActivate'][0])
    {

        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling postSignatureRequestsSignatureRequestIdActivate'
            );
        }
        if (!preg_match("/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/", $signature_request_id)) {
            throw new \InvalidArgumentException("invalid value for \"signature_request_id\" when calling SignatureRequestApi.postSignatureRequestsSignatureRequestIdActivate, must conform to the pattern /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/.");
        }
        

        $resourcePath = '/signature_requests/{signatureRequestId}/activate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signatureRequestId' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdCancel
     *
     * Cancel a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  \Yousign\Client\Model\PostSignatureRequestsSignatureRequestIdCancelRequest $post_signature_requests_signature_request_id_cancel_request post_signature_requests_signature_request_id_cancel_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSignatureRequestsSignatureRequestIdCancel'] to see the possible values for this operation
     *
     * @throws \Yousign\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Yousign\Client\Model\SignatureRequest|\Yousign\Client\Model\ViolationResponse|\Yousign\Client\Model\PostArchives401Response|object|object|\Yousign\Client\Model\ViolationResponse
     */
    public function postSignatureRequestsSignatureRequestIdCancel($signature_request_id, $post_signature_requests_signature_request_id_cancel_request = null, string $contentType = self::contentTypes['postSignatureRequestsSignatureRequestIdCancel'][0])
    {
        list($response) = $this->postSignatureRequestsSignatureRequestIdCancelWithHttpInfo($signature_request_id, $post_signature_requests_signature_request_id_cancel_request, $contentType);
        return $response;
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdCancelWithHttpInfo
     *
     * Cancel a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  \Yousign\Client\Model\PostSignatureRequestsSignatureRequestIdCancelRequest $post_signature_requests_signature_request_id_cancel_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSignatureRequestsSignatureRequestIdCancel'] to see the possible values for this operation
     *
     * @throws \Yousign\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Yousign\Client\Model\SignatureRequest|\Yousign\Client\Model\ViolationResponse|\Yousign\Client\Model\PostArchives401Response|object|object|\Yousign\Client\Model\ViolationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postSignatureRequestsSignatureRequestIdCancelWithHttpInfo($signature_request_id, $post_signature_requests_signature_request_id_cancel_request = null, string $contentType = self::contentTypes['postSignatureRequestsSignatureRequestIdCancel'][0])
    {
        $request = $this->postSignatureRequestsSignatureRequestIdCancelRequest($signature_request_id, $post_signature_requests_signature_request_id_cancel_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Yousign\Client\Model\SignatureRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\SignatureRequest' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\SignatureRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Yousign\Client\Model\ViolationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\ViolationResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\ViolationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Yousign\Client\Model\PostArchives401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\PostArchives401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\PostArchives401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Yousign\Client\Model\ViolationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\ViolationResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\ViolationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Yousign\Client\Model\SignatureRequest';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\SignatureRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\ViolationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\PostArchives401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\ViolationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdCancelAsync
     *
     * Cancel a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  \Yousign\Client\Model\PostSignatureRequestsSignatureRequestIdCancelRequest $post_signature_requests_signature_request_id_cancel_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSignatureRequestsSignatureRequestIdCancel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSignatureRequestsSignatureRequestIdCancelAsync($signature_request_id, $post_signature_requests_signature_request_id_cancel_request = null, string $contentType = self::contentTypes['postSignatureRequestsSignatureRequestIdCancel'][0])
    {
        return $this->postSignatureRequestsSignatureRequestIdCancelAsyncWithHttpInfo($signature_request_id, $post_signature_requests_signature_request_id_cancel_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdCancelAsyncWithHttpInfo
     *
     * Cancel a Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  \Yousign\Client\Model\PostSignatureRequestsSignatureRequestIdCancelRequest $post_signature_requests_signature_request_id_cancel_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSignatureRequestsSignatureRequestIdCancel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSignatureRequestsSignatureRequestIdCancelAsyncWithHttpInfo($signature_request_id, $post_signature_requests_signature_request_id_cancel_request = null, string $contentType = self::contentTypes['postSignatureRequestsSignatureRequestIdCancel'][0])
    {
        $returnType = '\Yousign\Client\Model\SignatureRequest';
        $request = $this->postSignatureRequestsSignatureRequestIdCancelRequest($signature_request_id, $post_signature_requests_signature_request_id_cancel_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postSignatureRequestsSignatureRequestIdCancel'
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  \Yousign\Client\Model\PostSignatureRequestsSignatureRequestIdCancelRequest $post_signature_requests_signature_request_id_cancel_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSignatureRequestsSignatureRequestIdCancel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postSignatureRequestsSignatureRequestIdCancelRequest($signature_request_id, $post_signature_requests_signature_request_id_cancel_request = null, string $contentType = self::contentTypes['postSignatureRequestsSignatureRequestIdCancel'][0])
    {

        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling postSignatureRequestsSignatureRequestIdCancel'
            );
        }
        if (!preg_match("/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/", $signature_request_id)) {
            throw new \InvalidArgumentException("invalid value for \"signature_request_id\" when calling SignatureRequestApi.postSignatureRequestsSignatureRequestIdCancel, must conform to the pattern /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/.");
        }
        


        $resourcePath = '/signature_requests/{signatureRequestId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signatureRequestId' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_signature_requests_signature_request_id_cancel_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_signature_requests_signature_request_id_cancel_request));
            } else {
                $httpBody = $post_signature_requests_signature_request_id_cancel_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdReactivate
     *
     * Reactivate an expired Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  \Yousign\Client\Model\PostSignatureRequestsSignatureRequestIdReactivateRequest $post_signature_requests_signature_request_id_reactivate_request post_signature_requests_signature_request_id_reactivate_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSignatureRequestsSignatureRequestIdReactivate'] to see the possible values for this operation
     *
     * @throws \Yousign\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Yousign\Client\Model\SignatureRequest|\Yousign\Client\Model\ViolationResponse|\Yousign\Client\Model\PostArchives401Response|object|object|\Yousign\Client\Model\ViolationResponse
     */
    public function postSignatureRequestsSignatureRequestIdReactivate($signature_request_id, $post_signature_requests_signature_request_id_reactivate_request = null, string $contentType = self::contentTypes['postSignatureRequestsSignatureRequestIdReactivate'][0])
    {
        list($response) = $this->postSignatureRequestsSignatureRequestIdReactivateWithHttpInfo($signature_request_id, $post_signature_requests_signature_request_id_reactivate_request, $contentType);
        return $response;
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdReactivateWithHttpInfo
     *
     * Reactivate an expired Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  \Yousign\Client\Model\PostSignatureRequestsSignatureRequestIdReactivateRequest $post_signature_requests_signature_request_id_reactivate_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSignatureRequestsSignatureRequestIdReactivate'] to see the possible values for this operation
     *
     * @throws \Yousign\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Yousign\Client\Model\SignatureRequest|\Yousign\Client\Model\ViolationResponse|\Yousign\Client\Model\PostArchives401Response|object|object|\Yousign\Client\Model\ViolationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postSignatureRequestsSignatureRequestIdReactivateWithHttpInfo($signature_request_id, $post_signature_requests_signature_request_id_reactivate_request = null, string $contentType = self::contentTypes['postSignatureRequestsSignatureRequestIdReactivate'][0])
    {
        $request = $this->postSignatureRequestsSignatureRequestIdReactivateRequest($signature_request_id, $post_signature_requests_signature_request_id_reactivate_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Yousign\Client\Model\SignatureRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\SignatureRequest' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\SignatureRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Yousign\Client\Model\ViolationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\ViolationResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\ViolationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Yousign\Client\Model\PostArchives401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\PostArchives401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\PostArchives401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Yousign\Client\Model\ViolationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Yousign\Client\Model\ViolationResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yousign\Client\Model\ViolationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Yousign\Client\Model\SignatureRequest';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\SignatureRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\ViolationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\PostArchives401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yousign\Client\Model\ViolationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdReactivateAsync
     *
     * Reactivate an expired Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  \Yousign\Client\Model\PostSignatureRequestsSignatureRequestIdReactivateRequest $post_signature_requests_signature_request_id_reactivate_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSignatureRequestsSignatureRequestIdReactivate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSignatureRequestsSignatureRequestIdReactivateAsync($signature_request_id, $post_signature_requests_signature_request_id_reactivate_request = null, string $contentType = self::contentTypes['postSignatureRequestsSignatureRequestIdReactivate'][0])
    {
        return $this->postSignatureRequestsSignatureRequestIdReactivateAsyncWithHttpInfo($signature_request_id, $post_signature_requests_signature_request_id_reactivate_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postSignatureRequestsSignatureRequestIdReactivateAsyncWithHttpInfo
     *
     * Reactivate an expired Signature Request
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  \Yousign\Client\Model\PostSignatureRequestsSignatureRequestIdReactivateRequest $post_signature_requests_signature_request_id_reactivate_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSignatureRequestsSignatureRequestIdReactivate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSignatureRequestsSignatureRequestIdReactivateAsyncWithHttpInfo($signature_request_id, $post_signature_requests_signature_request_id_reactivate_request = null, string $contentType = self::contentTypes['postSignatureRequestsSignatureRequestIdReactivate'][0])
    {
        $returnType = '\Yousign\Client\Model\SignatureRequest';
        $request = $this->postSignatureRequestsSignatureRequestIdReactivateRequest($signature_request_id, $post_signature_requests_signature_request_id_reactivate_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postSignatureRequestsSignatureRequestIdReactivate'
     *
     * @param  string $signature_request_id Signature Request Id (required)
     * @param  \Yousign\Client\Model\PostSignatureRequestsSignatureRequestIdReactivateRequest $post_signature_requests_signature_request_id_reactivate_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSignatureRequestsSignatureRequestIdReactivate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postSignatureRequestsSignatureRequestIdReactivateRequest($signature_request_id, $post_signature_requests_signature_request_id_reactivate_request = null, string $contentType = self::contentTypes['postSignatureRequestsSignatureRequestIdReactivate'][0])
    {

        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling postSignatureRequestsSignatureRequestIdReactivate'
            );
        }
        if (!preg_match("/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/", $signature_request_id)) {
            throw new \InvalidArgumentException("invalid value for \"signature_request_id\" when calling SignatureRequestApi.postSignatureRequestsSignatureRequestIdReactivate, must conform to the pattern /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/.");
        }
        


        $resourcePath = '/signature_requests/{signatureRequestId}/reactivate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signatureRequestId' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_signature_requests_signature_request_id_reactivate_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_signature_requests_signature_request_id_reactivate_request));
            } else {
                $httpBody = $post_signature_requests_signature_request_id_reactivate_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
